{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.gif","path":"images/bg.gif","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.png","path":"images/bg.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/upyun.png","path":"images/upyun.png","modified":0,"renderable":1},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/links.yml","hash":"bc1f7b822c421db9799213ba610a90f0324d68ae","modified":1646817277498},{"_id":"source/_posts/hello-hexo.md","hash":"b9bd6853fde44bc4a24dfd81530c29ddad32621e","modified":1646904415022},{"_id":"source/_posts/the-beginning.md","hash":"d1147e58c76230407c7b1dda9a4b53acc11b428e","modified":1646922519948},{"_id":"source/_posts/【STM32学习记录】第一节-了解STM32.md","hash":"40723e8bb7cc32f37863a4c60e924e09fd611e70","modified":1646922640027},{"_id":"source/_posts/关于C语言动态分配内存.md","hash":"70305837721a34519d9021dccd6f36157a4cb26f","modified":1646922694458},{"_id":"source/_posts/如何搭建自己的Blog.md","hash":"ae3e1f0c3e139a6f7eafff9830f473a16fa860d6","modified":1647020078654},{"_id":"source/about/index.md","hash":"b6ead93dc54e8e4ad3bc6fecca7fcb86e1cbb0ff","modified":1646922547563},{"_id":"source/archives/index.md","hash":"47fac1f536ee8b0b0e2005fefb5f83155e1b41a2","modified":1646761638497},{"_id":"source/categories/index.md","hash":"baf0557144dcb9a7b88723bf3f7799e6a536bdeb","modified":1646740028671},{"_id":"source/links/index.md","hash":"c103e14d4f52132b6cc6b8aa18aec947c353ecd4","modified":1646894564967},{"_id":"source/tags/index.md","hash":"0d64e49f818d283b0d14d929706bf0e78e6ca097","modified":1646890843067},{"_id":"source/_posts/【STM32学习记录】第一节-了解STM32/艾米莉亚1.jpg","hash":"f4844b38ac91f542a14c09995e0708b638e03411","modified":1646738885306},{"_id":"source/_posts/如何搭建自己的Blog/bg.png","hash":"dc0e04782d904428850ad13dc23842646ce194f5","modified":1646738946620},{"_id":"themes/keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1646816325479},{"_id":"themes/keep/.npmignore","hash":"48eee50624f0ad4ed5b37ae81e95f5e5cb4c7f7f","modified":1646816325479},{"_id":"themes/keep/.gitignore","hash":"9f5eebec6128f0029691c28190673d959cb0f234","modified":1646816325479},{"_id":"themes/keep/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1646816325480},{"_id":"themes/keep/_config.yml","hash":"bc48b8c55e5ca453eddf0a6774d2a90a1b402b8f","modified":1647019980770},{"_id":"themes/keep/package.json","hash":"a3be00d629d52f6cadde16fea48a0f68c288da07","modified":1646816325491},{"_id":"themes/keep/README.md","hash":"06ef53a5daecd42cfe7d653f9331e5ea66f1f590","modified":1646816325480},{"_id":"themes/keep/README_zh-CN.md","hash":"d3bfa4f8720b73455d9e77f3e918de60daca01d7","modified":1646816325480},{"_id":"themes/keep/languages/en.yml","hash":"11902f5813fc994a0620580d3caecad0bd4f4bec","modified":1646816325481},{"_id":"themes/keep/README_zh-TW.md","hash":"9913cf385c568a516055b27a9c944cc95263b3bc","modified":1646816325481},{"_id":"themes/keep/languages/zh-CN.yml","hash":"f8b9da63093739b5b7a555e8d1aa0f30d38171dc","modified":1646816325481},{"_id":"themes/keep/languages/zh-TW.yml","hash":"428b304a3ad542072bb578ed312bb06794a654e1","modified":1646816325482},{"_id":"themes/keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1646816325488},{"_id":"themes/keep/layout/category-content.ejs","hash":"9293aba389c0664335b3308cbb343e603ff1f24f","modified":1646816325489},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1646816325488},{"_id":"themes/keep/layout/article-content.ejs","hash":"9597d26784b62b0060950e8af2f71322013d3828","modified":1646816325488},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1646816325489},{"_id":"themes/keep/.github/FUNDING.yml","hash":"04ebd5562487625d07c01767f7b68312772bf3db","modified":1646816325479},{"_id":"themes/keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1646816325489},{"_id":"themes/keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1646816325489},{"_id":"themes/keep/layout/layout.ejs","hash":"a2d3f1ee6a79810de41d80b80c087f675f86ef84","modified":1646816325490},{"_id":"themes/keep/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1646816325490},{"_id":"themes/keep/layout/tag-content.ejs","hash":"379fad48764e11d7962f7cec730b0a6e932ef4a3","modified":1646816325490},{"_id":"themes/keep/layout/page.ejs","hash":"ad0d0452ee61277805ac30c8d97b9bdd3d09cf89","modified":1646816325490},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1646816325490},{"_id":"themes/keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1646816325493},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1646816325491},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"c51a44fd234c7bc5e265f6c0afe3b4c9ca665b0c","modified":1646816325482},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1646816325482},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"fb04ac78cfee23b5f73b8721925e9c7fc168e2aa","modified":1646816325483},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"e28d781dd6868b08e9007393495fae75c6e502aa","modified":1646816325484},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"e659c6a12c80ebf0cbe9f38a58425248702f8d2f","modified":1646816325484},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"7ef185f52364e891791472e365d2e4441f738aa3","modified":1646816325484},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"697eb90b6448d1dcecc0fc19f1033086697bb2f8","modified":1646816325485},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"f26d28c92ca79287d45cf20da6fdb0f68815c655","modified":1646816325485},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"bb57e24ef7005175824f19ff4cb8537ce4771590","modified":1646816325485},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"747cd0ac75f31c9837abcbf5e06eac5501089d96","modified":1646816325486},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"44a271ffbfb3af5c715ab25777cc58ddf9f62f82","modified":1646816325487},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"adec4312027a76b5969e78a2dd245563e4e6333f","modified":1646816325486},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1646816325485},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1646816325486},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"791c78e36e4191f5a738964d4fba545be2649cea","modified":1646816325487},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"3439e47a03651a3540541ba85d9ab0c9b456fc04","modified":1646816325487},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"3c1f80ec34a4db4d242b8b1c024ffa8de0ddac78","modified":1646816325488},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ea08752ab79d3c61e31fae9dd49afc0feff6f36a","modified":1646816325487},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1646816325488},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"c62dc757815b23c04bfd9112136d39a7deb5709a","modified":1646816325491},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1646816325492},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"9099191029226a04aa7e633920dc3458fef940e7","modified":1646816325492},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"9b149793aac46a1d7550ca2db49e215feffe1178","modified":1646816325492},{"_id":"themes/keep/source/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1646816325504},{"_id":"themes/keep/source/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1646816325504},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1646816325496},{"_id":"themes/keep/source/css/style.styl","hash":"e193b9f313c20f91504e4115a07e94e93ac383f8","modified":1646816325504},{"_id":"themes/keep/source/js/back2top.js","hash":"4be3dfc5ea5d134de22dddce950204c3fc05a659","modified":1646816325505},{"_id":"themes/keep/source/js/code-copy.js","hash":"0fa4f5c6b1b4fa2dd059a3fabd975cb5236aa68e","modified":1646816325506},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"3941485684abdc9170f68b536c7cab57f03d68db","modified":1646816325506},{"_id":"themes/keep/source/js/header-shrink.js","hash":"5a95ba1079638342689aa31ae331b0ad29423cfb","modified":1646816325506},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"2396af1662b0cc8bf525c7cfed2f212a752a3b20","modified":1646816325507},{"_id":"themes/keep/source/js/local-search.js","hash":"a76838dbc9b3dc683b7653d0e60c2a824316d598","modified":1646816325507},{"_id":"themes/keep/source/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1646816325505},{"_id":"themes/keep/source/js/main.js","hash":"52f9e2ccb2b93399bf2480aac989c702484b8aec","modified":1646816325507},{"_id":"themes/keep/source/js/toc.js","hash":"089573f669c7eaae7b3b88a1f4b94c630983f520","modified":1646816325507},{"_id":"themes/keep/source/js/utils.js","hash":"356c23107a336b682a7101dfc856fa6e0e6cdb76","modified":1646816325507},{"_id":"themes/keep/source/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1646816325505},{"_id":"themes/keep/source/js/lazyload.js","hash":"9b1d7be063feff3a4268190575959a81604cef95","modified":1646816325506},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1646816325516},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1646816325518},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1646816325518},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1646816325518},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"3567cb1acb984e13cf7b6ac047467298cd6e98e3","modified":1646816325483},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"5d75b54edfcfb6112ac2c50fa7f4040e3716261d","modified":1646816325483},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"cff08caa0a70bf276500ccdbf2965865399d985b","modified":1646816325483},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"1c58eb3e1f0bf06758787ff91c56924210de6665","modified":1646816325484},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"db76ce10f71e0aed717c4734ef2efbdc4b860c16","modified":1646816325487},{"_id":"themes/keep/source/css/common/animated.styl","hash":"064493c99c4d1d19803fc544251f4fbc491e7a1d","modified":1646816325493},{"_id":"themes/keep/source/css/common/basic.styl","hash":"2ecd4b0d469038a0753ad2de3eb2ba8c20f809db","modified":1646816325494},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"48acc1b0b18b5c34d758118bad135b7cea18b5a1","modified":1646816325495},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"8f62a171debaa09d653328d0c76e170f82351a40","modified":1646816325502},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"254ca2715de67d5783adfae40723a7917b6d9f8a","modified":1646816325502},{"_id":"themes/keep/source/css/common/variables.styl","hash":"db80d2ad6d99267bbc13abe7b11660cae04cc023","modified":1646816325496},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"73a96b2e7bdbaa1e98fd2a9928a05c56763d9064","modified":1646816325495},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"9af1e7fbc52aad0b4a47593813961a32a1d2b5c5","modified":1646816325502},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"28ea212b14e664d08de4ce93db1e0153e48a11ed","modified":1646816325502},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"029336439c79ece32d25f8fee9dc018206fbcd1b","modified":1646816325503},{"_id":"themes/keep/source/css/layout/page.styl","hash":"c189508f4c6d807ef822af7bb9177f12e7532b94","modified":1646816325503},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"73af0b51aee119b2135dc8cd53cd3a3ad215fff6","modified":1646816325503},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1646816325507},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1646816325507},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"eac367ec543527a7533490fa19b451a452684614","modified":1646816325494},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"081f08ed399c4fc6227ab15109595a211693462b","modified":1646816325495},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"8b6131af54382b7959c255d58c52474564c91bf8","modified":1646816325494},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"e85adfdd6fd83d2529988da644df51ddffbc87f5","modified":1646816325497},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"ae286cb8c7e788a7d393774c9e9c394352e48e72","modified":1646816325497},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"8ca83a4fe1afbb15669becebcde3ed0e12ac07bb","modified":1646816325497},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"9422e7d052f9e8a81d5a9acf12af9670fe2c41bb","modified":1646816325499},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"0610a37f2eba1b6ee2ed138e3367d80be55c9d7d","modified":1646816325499},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"2bfe1bddb6224958f29e77bcb730cb7af547a5ae","modified":1646816325499},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"a381afa2de855d968810c4f6680436fd31c63d55","modified":1646816325500},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1646816325500},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"fb82ac6589304cf1e3ed7ff2904108641882ddbc","modified":1646816325500},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"97768d3f95e8cf36fd3f783a5deb7e8fcaa5c67d","modified":1646816325500},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"c2b9474d130df3605578b77d76c604234a2b0f6f","modified":1646816325501},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"7c642dfdd54ed60aadb2f162e25c4fc5720716b7","modified":1646816325500},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"39d03031033aa3bb9d3a76fdb5056966334e9221","modified":1646816325501},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"f1cec5eb066c13f17d0acc997790404d059fbd3f","modified":1646816325501},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"c19d5833234c510ac1b8358cfcb7e33af29c3f6d","modified":1646816325502},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"9874482d9a8bf623abc28f8fa9c2bbfeb55067a6","modified":1646816325498},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"09d223d23c8f032da4f156efebab46102b15942d","modified":1646816325498},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"8225224a5c6d688e4ecd2e5557e8b2c5c43e2cf4","modified":1646816325498},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"dbff6bc6ecb6a20068047e6f7532e1d2df627929","modified":1646816325498},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1646816325516},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1646816325515},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1646816325528},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1646816325528},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1646816325509},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1646816325515},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1646816325517},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1646816325520},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1646816325527},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1646816325513},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1646816325525},{"_id":"themes/keep/source/images/bg.gif","hash":"007b8ea486cf6d4c010f9d00fce08825159c76fd","modified":1646891102798},{"_id":"themes/keep/source/images/bg.png","hash":"401f2aee2a579744ea75bac46d1606a7ac3c8652","modified":1646913827923},{"_id":"public/search.json","hash":"aaad4677fc6167076e87192733f4340184f98575","modified":1647020219405},{"_id":"public/about/index.html","hash":"876eada6e7809ba2d082debd62936bf7b2fab1eb","modified":1647020219405},{"_id":"public/archives/index.html","hash":"b8b1520c564387f497262bd5de6a1c239c2f1ca8","modified":1647020219405},{"_id":"public/categories/index.html","hash":"351d59d016c055de9ce658f5112e12f2ab2b1b4d","modified":1647020219405},{"_id":"public/links/index.html","hash":"8b29914dcd1ee916d36f48ed754d4d85d16f4761","modified":1647020219405},{"_id":"public/tags/index.html","hash":"7f755e3103d4968ad86fad2a820ba6d48f443edf","modified":1647020219405},{"_id":"public/archives/2022/index.html","hash":"f2fa166daa39d5b609f535e0fca5dca75de6e541","modified":1647020219405},{"_id":"public/archives/2022/03/index.html","hash":"3dddc5ebaa45c4717af535a74f0e9b4452165012","modified":1647020219405},{"_id":"public/categories/日常/index.html","hash":"da238570c4c2c07e6c88017f9d0c64ec721e5149","modified":1647020219405},{"_id":"public/categories/STM32/index.html","hash":"a75992ef737451f4ab6a19475d36411760acf68c","modified":1647020219405},{"_id":"public/categories/C语言/index.html","hash":"f4e679e01bbd5a9a9585b2944ba84bf59ee30fa6","modified":1647020219405},{"_id":"public/categories/Hexo/index.html","hash":"58db7bcf13eb34e62ec46b5891d01418b47c45c0","modified":1647020219405},{"_id":"public/tags/Hexo/index.html","hash":"7b2d620117338c6e602fcd8cbc770d12bc8393ee","modified":1647020219405},{"_id":"public/tags/Beginning/index.html","hash":"77fcc5b1556d7e3ea8240b1dabcecb48408c2e28","modified":1647020219405},{"_id":"public/tags/STM32/index.html","hash":"4bb85ca67a2d2d5d7fac3e711a123f1524f42e24","modified":1647020219405},{"_id":"public/tags/C8T6/index.html","hash":"28ca41683d3bf792822567c0eee6ecf6b0a6918e","modified":1647020219405},{"_id":"public/tags/芯片结构/index.html","hash":"0afd3e53a88401167b898a53e902c64e78345c44","modified":1647020219405},{"_id":"public/tags/C/index.html","hash":"4b81a5b5343bb9a96ad5d20e89edcc2c5c4789b5","modified":1647020219405},{"_id":"public/tags/malloc/index.html","hash":"3ec88594c456ff6565de88f2e0a5cdaafea2bba8","modified":1647020219405},{"_id":"public/tags/动态分配/index.html","hash":"1543a4e918a65830cf110e6fe794623612537d4d","modified":1647020219405},{"_id":"public/tags/Github/index.html","hash":"bbd1d415d48b677bb01d982aca184c39d3e2faf5","modified":1647020219405},{"_id":"public/tags/Vercel/index.html","hash":"010b9232fe5c5c63013d299d02adc8a087851ff8","modified":1647020219405},{"_id":"public/tags/Blog/index.html","hash":"0b7f9c116aea670137ebfc1f87c2ac03c294b83d","modified":1647020219405},{"_id":"public/2022/03/10/如何搭建自己的Blog/index.html","hash":"c0f9f099531abbf281519f9c17f9453439be1010","modified":1647020219405},{"_id":"public/2022/03/10/【STM32学习记录】第一节-了解STM32/index.html","hash":"5b16aaff793cb2647c067d5add50a37dabbdf511","modified":1647020219405},{"_id":"public/2022/03/10/关于C语言动态分配内存/index.html","hash":"b15fbc7ef88954fd1ab988f233934c591ce5dd0a","modified":1647020219405},{"_id":"public/2022/03/10/the-beginning/index.html","hash":"bd68f0d6d917f472387d1e2e60ea996fe7142641","modified":1647020219405},{"_id":"public/2022/03/08/hello-hexo/index.html","hash":"21628f5bee0e2b582ae5337a3918bcc56311c0ae","modified":1647020219405},{"_id":"public/index.html","hash":"cc4ed81d3d57b777779b06961a0117f6b06cae21","modified":1647020219405},{"_id":"public/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1647020219405},{"_id":"public/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1647020219405},{"_id":"public/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1647020219405},{"_id":"public/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1647020219405},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1647020219405},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1647020219405},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1647020219405},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1647020219405},{"_id":"public/2022/03/10/【STM32学习记录】第一节-了解STM32/艾米莉亚1.jpg","hash":"f4844b38ac91f542a14c09995e0708b638e03411","modified":1647020219405},{"_id":"public/2022/03/10/如何搭建自己的Blog/bg.png","hash":"dc0e04782d904428850ad13dc23842646ce194f5","modified":1647020219405},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1647020219405},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1647020219405},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1647020219405},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1647020219405},{"_id":"public/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1647020219405},{"_id":"public/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1647020219405},{"_id":"public/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1647020219405},{"_id":"public/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1647020219405},{"_id":"public/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1647020219405},{"_id":"public/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1647020219405},{"_id":"public/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1647020219405},{"_id":"public/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1647020219405},{"_id":"public/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1647020219405},{"_id":"public/css/common/animated.css","hash":"654c7588d80dc8b481a203e3071b3cedd41c7fde","modified":1647020219405},{"_id":"public/css/common/basic.css","hash":"37653cf7142778310af0eddb0d4883de08cd5f18","modified":1647020219405},{"_id":"public/js/utils.js","hash":"a2413711ebf7ffc96eafec2ef45a5d243d3ccdb6","modified":1647020219405},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647020219405},{"_id":"public/css/common/markdown.css","hash":"8c9fb9f7fb403e76a4446a7e533ebe36dd702483","modified":1647020219405},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647020219405},{"_id":"public/css/layout/article-content.css","hash":"032fd87dc40e0252a5ab59a12adc420371bd13bf","modified":1647020219405},{"_id":"public/css/layout/category-content.css","hash":"9687f9cbe029092b633fb804c28ecdcb54860511","modified":1647020219405},{"_id":"public/css/common/variables.css","hash":"157311f7b38a76721f2b6a2a9bd5229fac60df41","modified":1647020219405},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1647020219405},{"_id":"public/css/layout/tag-content.css","hash":"90b0cff1ef0228035cdca9ade2adef71c6c8fb5e","modified":1647020219405},{"_id":"public/css/layout/home-content.css","hash":"be1438b849ebf82cea573986fbbd1deed5334a72","modified":1647020219405},{"_id":"public/css/layout/page.css","hash":"c9d5a1244b1a393ebf63412cf9ffef43ca48d64e","modified":1647020219405},{"_id":"public/css/common/codeblock/code-theme.css","hash":"0edc6d498dc0abbaadb152b48e9e7bebb6fd15f4","modified":1647020219405},{"_id":"public/css/common/codeblock/copy-code.css","hash":"fa5f022395fe92b6daea063418a32f8c19be6168","modified":1647020219405},{"_id":"public/css/common/codeblock/highlight.css","hash":"a6584196f859d00cdd962f43c809e44ed89319e4","modified":1647020219405},{"_id":"public/css/style.css","hash":"bb142fa241cbea39836b62c0095182d3b41c7485","modified":1647020219405},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1647020219405},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1647020219405},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1647020219405},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1647020219405},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1647020219405},{"_id":"public/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1647020219405},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1647020219405},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1647020219405},{"_id":"public/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1647020219405},{"_id":"public/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1647020219405},{"_id":"public/images/bg.gif","hash":"007b8ea486cf6d4c010f9d00fce08825159c76fd","modified":1647020219405},{"_id":"public/images/bg.png","hash":"401f2aee2a579744ea75bac46d1606a7ac3c8652","modified":1647020219405}],"Category":[{"name":"日常","_id":"cl0mpbb3p00045gv97669b9yz"},{"name":"STM32","_id":"cl0mpbb3x000f5gv95bsc2yj8"},{"name":"C语言","_id":"cl0mpbb3y000j5gv93svfg5yx"},{"name":"Hexo","_id":"cl0mpbb3z000o5gv9cmtz2vci"}],"Data":[{"_id":"links","data":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}],"Page":[{"title":"about","date":"2022-03-08T11:45:10.000Z","_content":"\n# About me\n\n凉凉不冷 的名字由来，是因为原名取 凉歌 后来发烧的时候温度上去了，\n\n于是就改了（就这么随意...）。\n\n凉歌 的名字由来是以前朋友们这么称呼的，\n\n本人也挺喜欢音乐，平时说不定也会唱唱歌\n\n+\t啥也不会，被迫学习技术（）\n+\t从零开始🙏\n+\t还在学习各种神奇但很基础的东西（我目前也许只会C语言？）\n+\tOld  网瘾少年 (/ω＼\\*)……… (/ω•＼\\*)\n+\t周末闲暇时会 Play Guitar🎸\n\n# Contact me\n+\tBilibili：[<u>@小可爱凉歌吖</u>](https://space.bilibili.com/45024635)\n+\t邮箱：LiangGe233@outlook.com\n+\tBlog：https://www.liliaw.com/\n\n# Have no projects up to now","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-03-08 19:45:10\n  \n---\n\n# About me\n\n凉凉不冷 的名字由来，是因为原名取 凉歌 后来发烧的时候温度上去了，\n\n于是就改了（就这么随意...）。\n\n凉歌 的名字由来是以前朋友们这么称呼的，\n\n本人也挺喜欢音乐，平时说不定也会唱唱歌\n\n+\t啥也不会，被迫学习技术（）\n+\t从零开始🙏\n+\t还在学习各种神奇但很基础的东西（我目前也许只会C语言？）\n+\tOld  网瘾少年 (/ω＼\\*)……… (/ω•＼\\*)\n+\t周末闲暇时会 Play Guitar🎸\n\n# Contact me\n+\tBilibili：[<u>@小可爱凉歌吖</u>](https://space.bilibili.com/45024635)\n+\t邮箱：LiangGe233@outlook.com\n+\tBlog：https://www.liliaw.com/\n\n# Have no projects up to now","updated":"2022-03-10T14:29:07.563Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0mpbb3h00005gv96a3h9puk","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><p>凉凉不冷 的名字由来，是因为原名取 凉歌 后来发烧的时候温度上去了，</p>\n<p>于是就改了（就这么随意…）。</p>\n<p>凉歌 的名字由来是以前朋友们这么称呼的，</p>\n<p>本人也挺喜欢音乐，平时说不定也会唱唱歌</p>\n<ul>\n<li>   啥也不会，被迫学习技术（）</li>\n<li>   从零开始🙏</li>\n<li>   还在学习各种神奇但很基础的东西（我目前也许只会C语言？）</li>\n<li>   Old  网瘾少年 (/ω＼*)……… (/ω•＼*)</li>\n<li>   周末闲暇时会 Play Guitar🎸</li>\n</ul>\n<h1 id=\"Contact-me\"><a href=\"#Contact-me\" class=\"headerlink\" title=\"Contact me\"></a>Contact me</h1><ul>\n<li>   Bilibili：<a href=\"https://space.bilibili.com/45024635\"><u>@小可爱凉歌吖</u></a></li>\n<li>   邮箱：<a class=\"link\"   href=\"mailto:&#x4c;&#x69;&#97;&#x6e;&#x67;&#71;&#x65;&#50;&#x33;&#51;&#x40;&#x6f;&#117;&#116;&#108;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;\" >&#x4c;&#x69;&#97;&#x6e;&#x67;&#71;&#x65;&#50;&#x33;&#51;&#x40;&#x6f;&#117;&#116;&#108;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>   Blog：<a class=\"link\"   href=\"https://www.liliaw.com/\" >https://www.liliaw.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"Have-no-projects-up-to-now\"><a href=\"#Have-no-projects-up-to-now\" class=\"headerlink\" title=\"Have no projects up to now\"></a>Have no projects up to now</h1>","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><p>凉凉不冷 的名字由来，是因为原名取 凉歌 后来发烧的时候温度上去了，</p>\n<p>于是就改了（就这么随意…）。</p>\n<p>凉歌 的名字由来是以前朋友们这么称呼的，</p>\n<p>本人也挺喜欢音乐，平时说不定也会唱唱歌</p>\n<ul>\n<li>   啥也不会，被迫学习技术（）</li>\n<li>   从零开始🙏</li>\n<li>   还在学习各种神奇但很基础的东西（我目前也许只会C语言？）</li>\n<li>   Old  网瘾少年 (/ω＼*)……… (/ω•＼*)</li>\n<li>   周末闲暇时会 Play Guitar🎸</li>\n</ul>\n<h1 id=\"Contact-me\"><a href=\"#Contact-me\" class=\"headerlink\" title=\"Contact me\"></a>Contact me</h1><ul>\n<li>   Bilibili：<a href=\"https://space.bilibili.com/45024635\"><u>@小可爱凉歌吖</u></a></li>\n<li>   邮箱：<a class=\"link\"   href=\"mailto:&#x4c;&#x69;&#97;&#x6e;&#x67;&#71;&#x65;&#50;&#x33;&#51;&#x40;&#x6f;&#117;&#116;&#108;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;\" >&#x4c;&#x69;&#97;&#x6e;&#x67;&#71;&#x65;&#50;&#x33;&#51;&#x40;&#x6f;&#117;&#116;&#108;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>   Blog：<a class=\"link\"   href=\"https://www.liliaw.com/\" >https://www.liliaw.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h1 id=\"Have-no-projects-up-to-now\"><a href=\"#Have-no-projects-up-to-now\" class=\"headerlink\" title=\"Have no projects up to now\"></a>Have no projects up to now</h1>"},{"title":"[object Object]","date":"2022-03-08T17:47:18.497Z","_content":"","source":"archives/index.md","raw":"---\ntitle:\n  '[object Object]': null\ndate:\n  '[object Object]': null\n---\n","updated":"2022-03-08T17:47:18.497Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cl0mpbb3m00025gv90fpz8inm","content":"","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2022-03-08T11:45:10.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-03-08 19:45:10\n---\n","updated":"2022-03-08T11:47:08.671Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0mpbb3r00065gv93cep2njs","content":"","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"links","date":"2022-03-08T11:45:10.000Z","comment":true,"_content":"\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2022-03-08 19:45:10\ncomment: true\n---\n\n","updated":"2022-03-10T06:42:44.967Z","path":"links/index.html","comments":1,"layout":"page","_id":"cl0mpbb3t00085gv9bbx90v06","content":"","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-03-08T11:45:10.000Z","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-03-08 19:45:10\n---\n\n","updated":"2022-03-10T05:40:43.067Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0mpbb3u000a5gv9326r888q","content":"","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Hello Hexo!","date":"2022-03-08T12:37:40.000Z","stucky":99999,"_content":"\nJust a spur of the moment, I wanna start a blog.\n\nAnd here we go, by hexo.\n\n## Prior to start \n\n### Create a Github account\n\n>   内容已经被🕊🕊\n\n\n### Learn something about hexo\n\n>   The content has been 🕊🕊\n>\n\n### Learn something about vercel\n\n>   Le contenu a été 🕊🕊\n>\n\n### Get a domain name\n\n>   コンテンツが既にです🕊🕊","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hello Hexo!\ndate: 2022-03-08 20:37:40\ntags: [Hexo]\ncategories: [日常]\nstucky: 99999\n---\n\nJust a spur of the moment, I wanna start a blog.\n\nAnd here we go, by hexo.\n\n## Prior to start \n\n### Create a Github account\n\n>   内容已经被🕊🕊\n\n\n### Learn something about hexo\n\n>   The content has been 🕊🕊\n>\n\n### Learn something about vercel\n\n>   Le contenu a été 🕊🕊\n>\n\n### Get a domain name\n\n>   コンテンツが既にです🕊🕊","slug":"hello-hexo","published":1,"updated":"2022-03-10T09:26:55.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0mpbb3j00015gv98hsjgm8n","content":"<p>Just a spur of the moment, I wanna start a blog.</p>\n<p>And here we go, by hexo.</p>\n<h2 id=\"Prior-to-start\"><a href=\"#Prior-to-start\" class=\"headerlink\" title=\"Prior to start\"></a>Prior to start</h2><h3 id=\"Create-a-Github-account\"><a href=\"#Create-a-Github-account\" class=\"headerlink\" title=\"Create a Github account\"></a>Create a Github account</h3><blockquote>\n<p>  内容已经被🕊🕊</p>\n</blockquote>\n<h3 id=\"Learn-something-about-hexo\"><a href=\"#Learn-something-about-hexo\" class=\"headerlink\" title=\"Learn something about hexo\"></a>Learn something about hexo</h3><blockquote>\n<p>  The content has been 🕊🕊</p>\n</blockquote>\n<h3 id=\"Learn-something-about-vercel\"><a href=\"#Learn-something-about-vercel\" class=\"headerlink\" title=\"Learn something about vercel\"></a>Learn something about vercel</h3><blockquote>\n<p>  Le contenu a été 🕊🕊</p>\n</blockquote>\n<h3 id=\"Get-a-domain-name\"><a href=\"#Get-a-domain-name\" class=\"headerlink\" title=\"Get a domain name\"></a>Get a domain name</h3><blockquote>\n<p>  コンテンツが既にです🕊🕊</p>\n</blockquote>\n","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<p>Just a spur of the moment, I wanna start a blog.</p>\n<p>And here we go, by hexo.</p>\n<h2 id=\"Prior-to-start\"><a href=\"#Prior-to-start\" class=\"headerlink\" title=\"Prior to start\"></a>Prior to start</h2><h3 id=\"Create-a-Github-account\"><a href=\"#Create-a-Github-account\" class=\"headerlink\" title=\"Create a Github account\"></a>Create a Github account</h3><blockquote>\n<p>  内容已经被🕊🕊</p>\n</blockquote>\n<h3 id=\"Learn-something-about-hexo\"><a href=\"#Learn-something-about-hexo\" class=\"headerlink\" title=\"Learn something about hexo\"></a>Learn something about hexo</h3><blockquote>\n<p>  The content has been 🕊🕊</p>\n</blockquote>\n<h3 id=\"Learn-something-about-vercel\"><a href=\"#Learn-something-about-vercel\" class=\"headerlink\" title=\"Learn something about vercel\"></a>Learn something about vercel</h3><blockquote>\n<p>  Le contenu a été 🕊🕊</p>\n</blockquote>\n<h3 id=\"Get-a-domain-name\"><a href=\"#Get-a-domain-name\" class=\"headerlink\" title=\"Get a domain name\"></a>Get a domain name</h3><blockquote>\n<p>  コンテンツが既にです🕊🕊</p>\n</blockquote>\n"},{"title":"The-Beginning","mathjax":true,"date":"2022-03-10T06:22:22.000Z","comment":true,"_content":"\n>   至于为什么会突然想到 **Start a Blog**，\n>\n>   是想要记录一下自己的日常以及成长历程（也许算是成长...？），\n>\n>   也是想把自己的问题，或者学习历程记录下来，\n>\n>   省得遇到同样问题却想不起来，再去问别人的或查找的同时，\n>\n>   也能让其他人也能从中看到一些东西（也许）。\n\n>   还有的原因是看到了域名突然就想买一个来玩....\n>\n>   冲动是学习的第一动力（错乱）\n\n------------------------------\n\n不知道写什么了（突然），那就祝大家新年快乐吧（？），想好了再改。\n\n主页的深色调模式和背景匹配起来还是有点BUG啊啊啊啊啊啊\n\n![](https://s3.bmp.ovh/imgs/2022/03/6cc9cc3d44da4958.png)","source":"_posts/the-beginning.md","raw":"---\ntitle: The-Beginning\nmathjax: true\ndate: 2022-03-10 14:22:22\ntags: [Hexo,Beginning]\ncategories: 日常\ncomment: true\n---\n\n>   至于为什么会突然想到 **Start a Blog**，\n>\n>   是想要记录一下自己的日常以及成长历程（也许算是成长...？），\n>\n>   也是想把自己的问题，或者学习历程记录下来，\n>\n>   省得遇到同样问题却想不起来，再去问别人的或查找的同时，\n>\n>   也能让其他人也能从中看到一些东西（也许）。\n\n>   还有的原因是看到了域名突然就想买一个来玩....\n>\n>   冲动是学习的第一动力（错乱）\n\n------------------------------\n\n不知道写什么了（突然），那就祝大家新年快乐吧（？），想好了再改。\n\n主页的深色调模式和背景匹配起来还是有点BUG啊啊啊啊啊啊\n\n![](https://s3.bmp.ovh/imgs/2022/03/6cc9cc3d44da4958.png)","slug":"the-beginning","published":1,"updated":"2022-03-10T14:28:39.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0mpbb3n00035gv93zu491kp","content":"<blockquote>\n<p>  至于为什么会突然想到 <strong>Start a Blog</strong>，</p>\n<p>  是想要记录一下自己的日常以及成长历程（也许算是成长…？），</p>\n<p>  也是想把自己的问题，或者学习历程记录下来，</p>\n<p>  省得遇到同样问题却想不起来，再去问别人的或查找的同时，</p>\n<p>  也能让其他人也能从中看到一些东西（也许）。</p>\n</blockquote>\n<blockquote>\n<p>  还有的原因是看到了域名突然就想买一个来玩….</p>\n<p>  冲动是学习的第一动力（错乱）</p>\n</blockquote>\n<hr>\n<p>不知道写什么了（突然），那就祝大家新年快乐吧（？），想好了再改。</p>\n<p>主页的深色调模式和背景匹配起来还是有点BUG啊啊啊啊啊啊</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/6cc9cc3d44da4958.png\"></p>\n","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>  至于为什么会突然想到 <strong>Start a Blog</strong>，</p>\n<p>  是想要记录一下自己的日常以及成长历程（也许算是成长…？），</p>\n<p>  也是想把自己的问题，或者学习历程记录下来，</p>\n<p>  省得遇到同样问题却想不起来，再去问别人的或查找的同时，</p>\n<p>  也能让其他人也能从中看到一些东西（也许）。</p>\n</blockquote>\n<blockquote>\n<p>  还有的原因是看到了域名突然就想买一个来玩….</p>\n<p>  冲动是学习的第一动力（错乱）</p>\n</blockquote>\n<hr>\n<p>不知道写什么了（突然），那就祝大家新年快乐吧（？），想好了再改。</p>\n<p>主页的深色调模式和背景匹配起来还是有点BUG啊啊啊啊啊啊</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/6cc9cc3d44da4958.png\"></p>\n"},{"title":"【STM32学习记录】第一节-了解STM32","mathjax":true,"date":"2022-03-10T12:45:36.000Z","comment":true,"_content":"\n+   相关说明\n\n    本文仅为个人学习记录，若有错误欢迎指出，相关的参考文章会在本文末进行列出，主要参考视频为**Blibili**[@正点原子官方](https://space.bilibili.com/394620890?from=search&seid=13393056502650554081&spm_id_from=333.337.0.0)，以及**Blibili**[@野火_firege](https://space.bilibili.com/356820657?from=search&seid=6957304932395919416&spm_id_from=333.337.0.0)。\n\n    +   相关的可参考文件：\n\n    [STM32 中文参考手册](http://www.stm32er.com/zb_users/upload/2021/01/202101191611046723128863.pdf)\n\n    [STM32 选型手册 2021](https://www.stmcu.com.cn/upload/Selection_Guide.pdf)\n\n    [STM32F103C8T6 ](https://pdf1.alldatasheetcn.com/datasheet-pdf/view/201596/STMICROELECTRONICS/STM32F103C8T6.html)\n\n# 1.  STM32概述\n\n## 1.1 **CM3**芯片结构\n\n![](https://s3.bmp.ovh/imgs/2022/03/2dd63aab5ae67707.png)\n\n上图为Cortex-M3 芯片的结构图，总的来说，内核是由**ARM**公司来设计的，\n\n**ST**即意法半导体公司，设计开发了其他的内容。\n\n## 1.2 STM32F103系列\n\n![](https://s3.bmp.ovh/imgs/2022/03/47b00675cee9d26c.png)\n\n总的来说**STM32F103**系列芯片\n\n由**内核**、**总线**、**外设**组成；\n\n复位和时钟控制**RCC**挂载在**AHB总线**上，\n\n-> **驱动单元** + **被动单元**\n\n四种驱动单元：\n\n+   ICode\n+   DCode\n+   System\n+   DMA\n\n1.  **内核**通过**ICode总线**控制**外设**；\n\n![](https://s3.bmp.ovh/imgs/2022/03/e58a15af0c523e3e.png)\n\n2.  **DCode**为**数据总线**；\n\n    | 存放区域 | 存放类型 |\n    | :------: | :------: |\n    |  Flash   |   常量   |\n    |   SRAM   | 全局变量 |\n    |   SRAM   | 局部变量 |\n\n3.  **寄存器**存在于**外设**中通过**System总线**读取；\n\n4.  **DMA总线**用于搬数据，可以使CPU内部得到通用寄存器不被占用（不使用DMA时数据从SRAM中先被CPU读取至通用寄存器中，再通过总线传输）；\n\n## 1.3 命名规则\n\n![](https://s3.bmp.ovh/imgs/2022/03/2a4430e84a485b9f.png)\n\n区分32选型因素：\n\n+   flash容量\n+   引脚数量\n\n\n\n参考网站：\n\n[【单片机】野火STM32F103教学视频 (配套霸道/指南者/MINI)【全】(刘火良老师出品) (无字幕)_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1yW411Y7Gw)\n\n[【正点原子】 手把手教你学STM32单片机教学视频 嵌入式 之 F103-基于新战舰V3/精英/MINI板_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Lx411Z7Qa)\n\n\n\n<center>暂时就这样，持续更新ing...<center/>\n\n<img src=\"艾米莉亚1.jpg\"  width=\"330\"  height = \"450\" />","source":"_posts/【STM32学习记录】第一节-了解STM32.md","raw":"---\ntitle: 【STM32学习记录】第一节-了解STM32\nmathjax: true\ndate: 2022-03-10 20:45:36\ntags: [STM32,C8T6,芯片结构]\ncategories: [STM32]\ncomment: true\n---\n\n+   相关说明\n\n    本文仅为个人学习记录，若有错误欢迎指出，相关的参考文章会在本文末进行列出，主要参考视频为**Blibili**[@正点原子官方](https://space.bilibili.com/394620890?from=search&seid=13393056502650554081&spm_id_from=333.337.0.0)，以及**Blibili**[@野火_firege](https://space.bilibili.com/356820657?from=search&seid=6957304932395919416&spm_id_from=333.337.0.0)。\n\n    +   相关的可参考文件：\n\n    [STM32 中文参考手册](http://www.stm32er.com/zb_users/upload/2021/01/202101191611046723128863.pdf)\n\n    [STM32 选型手册 2021](https://www.stmcu.com.cn/upload/Selection_Guide.pdf)\n\n    [STM32F103C8T6 ](https://pdf1.alldatasheetcn.com/datasheet-pdf/view/201596/STMICROELECTRONICS/STM32F103C8T6.html)\n\n# 1.  STM32概述\n\n## 1.1 **CM3**芯片结构\n\n![](https://s3.bmp.ovh/imgs/2022/03/2dd63aab5ae67707.png)\n\n上图为Cortex-M3 芯片的结构图，总的来说，内核是由**ARM**公司来设计的，\n\n**ST**即意法半导体公司，设计开发了其他的内容。\n\n## 1.2 STM32F103系列\n\n![](https://s3.bmp.ovh/imgs/2022/03/47b00675cee9d26c.png)\n\n总的来说**STM32F103**系列芯片\n\n由**内核**、**总线**、**外设**组成；\n\n复位和时钟控制**RCC**挂载在**AHB总线**上，\n\n-> **驱动单元** + **被动单元**\n\n四种驱动单元：\n\n+   ICode\n+   DCode\n+   System\n+   DMA\n\n1.  **内核**通过**ICode总线**控制**外设**；\n\n![](https://s3.bmp.ovh/imgs/2022/03/e58a15af0c523e3e.png)\n\n2.  **DCode**为**数据总线**；\n\n    | 存放区域 | 存放类型 |\n    | :------: | :------: |\n    |  Flash   |   常量   |\n    |   SRAM   | 全局变量 |\n    |   SRAM   | 局部变量 |\n\n3.  **寄存器**存在于**外设**中通过**System总线**读取；\n\n4.  **DMA总线**用于搬数据，可以使CPU内部得到通用寄存器不被占用（不使用DMA时数据从SRAM中先被CPU读取至通用寄存器中，再通过总线传输）；\n\n## 1.3 命名规则\n\n![](https://s3.bmp.ovh/imgs/2022/03/2a4430e84a485b9f.png)\n\n区分32选型因素：\n\n+   flash容量\n+   引脚数量\n\n\n\n参考网站：\n\n[【单片机】野火STM32F103教学视频 (配套霸道/指南者/MINI)【全】(刘火良老师出品) (无字幕)_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1yW411Y7Gw)\n\n[【正点原子】 手把手教你学STM32单片机教学视频 嵌入式 之 F103-基于新战舰V3/精英/MINI板_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Lx411Z7Qa)\n\n\n\n<center>暂时就这样，持续更新ing...<center/>\n\n<img src=\"艾米莉亚1.jpg\"  width=\"330\"  height = \"450\" />","slug":"【STM32学习记录】第一节-了解STM32","published":1,"updated":"2022-03-10T14:30:40.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0mpbb3s00075gv96ska8kdo","content":"<ul>\n<li><p>相关说明</p>\n<p>  本文仅为个人学习记录，若有错误欢迎指出，相关的参考文章会在本文末进行列出，主要参考视频为<strong>Blibili</strong><a class=\"link\" href=\"https://space.bilibili.com/394620890?from=search&seid=13393056502650554081&spm_id_from=333.337.0.0\">@正点原子官方<i class=\"fas fa-external-link-alt\"></i></a>，以及<strong>Blibili</strong><a class=\"link\" href=\"https://space.bilibili.com/356820657?from=search&seid=6957304932395919416&spm_id_from=333.337.0.0\">@野火_firege<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<ul>\n<li><p>相关的可参考文件：</p>\n<p><a class=\"link\" href=\"http://www.stm32er.com/zb_users/upload/2021/01/202101191611046723128863.pdf\">STM32 中文参考手册<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://www.stmcu.com.cn/upload/Selection_Guide.pdf\">STM32 选型手册 2021<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://pdf1.alldatasheetcn.com/datasheet-pdf/view/201596/STMICROELECTRONICS/STM32F103C8T6.html\">STM32F103C8T6 <i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-STM32概述\"><a href=\"#1-STM32概述\" class=\"headerlink\" title=\"1.  STM32概述\"></a>1.  STM32概述</h1><h2 id=\"1-1-CM3芯片结构\"><a href=\"#1-1-CM3芯片结构\" class=\"headerlink\" title=\"1.1 CM3芯片结构\"></a>1.1 <strong>CM3</strong>芯片结构</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/2dd63aab5ae67707.png\"></p>\n<p>上图为Cortex-M3 芯片的结构图，总的来说，内核是由<strong>ARM</strong>公司来设计的，</p>\n<p><strong>ST</strong>即意法半导体公司，设计开发了其他的内容。</p>\n<h2 id=\"1-2-STM32F103系列\"><a href=\"#1-2-STM32F103系列\" class=\"headerlink\" title=\"1.2 STM32F103系列\"></a>1.2 STM32F103系列</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/47b00675cee9d26c.png\"></p>\n<p>总的来说<strong>STM32F103</strong>系列芯片</p>\n<p>由<strong>内核</strong>、<strong>总线</strong>、<strong>外设</strong>组成；</p>\n<p>复位和时钟控制<strong>RCC</strong>挂载在<strong>AHB总线</strong>上，</p>\n<p>-&gt; <strong>驱动单元</strong> + <strong>被动单元</strong></p>\n<p>四种驱动单元：</p>\n<ul>\n<li>  ICode</li>\n<li>  DCode</li>\n<li>  System</li>\n<li>  DMA</li>\n</ul>\n<ol>\n<li> <strong>内核</strong>通过<strong>ICode总线</strong>控制<strong>外设</strong>；</li>\n</ol>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/e58a15af0c523e3e.png\"></p>\n<ol start=\"2\">\n<li><p><strong>DCode</strong>为<strong>数据总线</strong>；</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">存放区域</th>\n<th align=\"center\">存放类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Flash</td>\n<td align=\"center\">常量</td>\n</tr>\n<tr>\n<td align=\"center\">SRAM</td>\n<td align=\"center\">全局变量</td>\n</tr>\n<tr>\n<td align=\"center\">SRAM</td>\n<td align=\"center\">局部变量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p> <strong>寄存器</strong>存在于<strong>外设</strong>中通过<strong>System总线</strong>读取；</p>\n</li>\n<li><p> <strong>DMA总线</strong>用于搬数据，可以使CPU内部得到通用寄存器不被占用（不使用DMA时数据从SRAM中先被CPU读取至通用寄存器中，再通过总线传输）；</p>\n</li>\n</ol>\n<h2 id=\"1-3-命名规则\"><a href=\"#1-3-命名规则\" class=\"headerlink\" title=\"1.3 命名规则\"></a>1.3 命名规则</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/2a4430e84a485b9f.png\"></p>\n<p>区分32选型因素：</p>\n<ul>\n<li>  flash容量</li>\n<li>  引脚数量</li>\n</ul>\n<p>参考网站：</p>\n<p><a class=\"link\" href=\"https://www.bilibili.com/video/BV1yW411Y7Gw\">【单片机】野火STM32F103教学视频 (配套霸道/指南者/MINI)【全】(刘火良老师出品) (无字幕)_哔哩哔哩_bilibili<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://www.bilibili.com/video/BV1Lx411Z7Qa\">【正点原子】 手把手教你学STM32单片机教学视频 嵌入式 之 F103-基于新战舰V3/精英/MINI板_哔哩哔哩_bilibili<i class=\"fas fa-external-link-alt\"></i></a></p>\n<center>暂时就这样，持续更新ing...<center></center>\n\n<img src=\"艾米莉亚1.jpg\" width=\"330\" height=\"450\"></center>","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<ul>\n<li><p>相关说明</p>\n<p>  本文仅为个人学习记录，若有错误欢迎指出，相关的参考文章会在本文末进行列出，主要参考视频为<strong>Blibili</strong><a class=\"link\" href=\"https://space.bilibili.com/394620890?from=search&seid=13393056502650554081&spm_id_from=333.337.0.0\">@正点原子官方<i class=\"fas fa-external-link-alt\"></i></a>，以及<strong>Blibili</strong><a class=\"link\" href=\"https://space.bilibili.com/356820657?from=search&seid=6957304932395919416&spm_id_from=333.337.0.0\">@野火_firege<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<ul>\n<li><p>相关的可参考文件：</p>\n<p><a class=\"link\" href=\"http://www.stm32er.com/zb_users/upload/2021/01/202101191611046723128863.pdf\">STM32 中文参考手册<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://www.stmcu.com.cn/upload/Selection_Guide.pdf\">STM32 选型手册 2021<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://pdf1.alldatasheetcn.com/datasheet-pdf/view/201596/STMICROELECTRONICS/STM32F103C8T6.html\">STM32F103C8T6 <i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-STM32概述\"><a href=\"#1-STM32概述\" class=\"headerlink\" title=\"1.  STM32概述\"></a>1.  STM32概述</h1><h2 id=\"1-1-CM3芯片结构\"><a href=\"#1-1-CM3芯片结构\" class=\"headerlink\" title=\"1.1 CM3芯片结构\"></a>1.1 <strong>CM3</strong>芯片结构</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/2dd63aab5ae67707.png\"></p>\n<p>上图为Cortex-M3 芯片的结构图，总的来说，内核是由<strong>ARM</strong>公司来设计的，</p>\n<p><strong>ST</strong>即意法半导体公司，设计开发了其他的内容。</p>\n<h2 id=\"1-2-STM32F103系列\"><a href=\"#1-2-STM32F103系列\" class=\"headerlink\" title=\"1.2 STM32F103系列\"></a>1.2 STM32F103系列</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/47b00675cee9d26c.png\"></p>\n<p>总的来说<strong>STM32F103</strong>系列芯片</p>\n<p>由<strong>内核</strong>、<strong>总线</strong>、<strong>外设</strong>组成；</p>\n<p>复位和时钟控制<strong>RCC</strong>挂载在<strong>AHB总线</strong>上，</p>\n<p>-&gt; <strong>驱动单元</strong> + <strong>被动单元</strong></p>\n<p>四种驱动单元：</p>\n<ul>\n<li>  ICode</li>\n<li>  DCode</li>\n<li>  System</li>\n<li>  DMA</li>\n</ul>\n<ol>\n<li> <strong>内核</strong>通过<strong>ICode总线</strong>控制<strong>外设</strong>；</li>\n</ol>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/e58a15af0c523e3e.png\"></p>\n<ol start=\"2\">\n<li><p><strong>DCode</strong>为<strong>数据总线</strong>；</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">存放区域</th>\n<th align=\"center\">存放类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Flash</td>\n<td align=\"center\">常量</td>\n</tr>\n<tr>\n<td align=\"center\">SRAM</td>\n<td align=\"center\">全局变量</td>\n</tr>\n<tr>\n<td align=\"center\">SRAM</td>\n<td align=\"center\">局部变量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p> <strong>寄存器</strong>存在于<strong>外设</strong>中通过<strong>System总线</strong>读取；</p>\n</li>\n<li><p> <strong>DMA总线</strong>用于搬数据，可以使CPU内部得到通用寄存器不被占用（不使用DMA时数据从SRAM中先被CPU读取至通用寄存器中，再通过总线传输）；</p>\n</li>\n</ol>\n<h2 id=\"1-3-命名规则\"><a href=\"#1-3-命名规则\" class=\"headerlink\" title=\"1.3 命名规则\"></a>1.3 命名规则</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/2a4430e84a485b9f.png\"></p>\n<p>区分32选型因素：</p>\n<ul>\n<li>  flash容量</li>\n<li>  引脚数量</li>\n</ul>\n<p>参考网站：</p>\n<p><a class=\"link\" href=\"https://www.bilibili.com/video/BV1yW411Y7Gw\">【单片机】野火STM32F103教学视频 (配套霸道/指南者/MINI)【全】(刘火良老师出品) (无字幕)_哔哩哔哩_bilibili<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://www.bilibili.com/video/BV1Lx411Z7Qa\">【正点原子】 手把手教你学STM32单片机教学视频 嵌入式 之 F103-基于新战舰V3/精英/MINI板_哔哩哔哩_bilibili<i class=\"fas fa-external-link-alt\"></i></a></p>\n<center>暂时就这样，持续更新ing...<center></center>\n\n<img src=\"艾米莉亚1.jpg\" width=\"330\" height=\"450\"></center>"},{"title":"关于C语言动态分配内存","mathjax":true,"date":"2022-03-10T12:36:49.000Z","comment":true,"_content":"## 传统数组的缺点\n\n1.  数组长度必须事先指定，只能是常量，不能是变量；\n2.  长度不能再函数运行的过程中动态地扩充或缩小；\n3.  数组所占内存空间程序员无法手动编程释放；\n\n即静态内存问题\n\n## malloc函数的使用\n\nmalloc 为一个系统函数，它是 memory allocate 的缩写。\n\n其中 memory 是 内存 的意思，\n\nallocate 是 分配 的意思，\n\n即 分配内存 。\n\n```c\n# include <stdlib.h>\nvoid *malloc(unsigned long size);\n```\n\nmalloc 函数只有一个形参，并且是整型。该函数的功能是在内存的动态储存空间即堆中分配一个长度为 size 的连续空间。\n\n函数的返回值是一个指向所分配内存空间起始地址的指针，类型为 void* 型。\n\nmalloc 函数的返回值是一个地址，这个地址就是动态分配的内存空间的起始地址。如果此函数未能成功地执行，\n\n如内存空间不足，则返回空指针 NULL 。\n\n静态变量（关键字为 static）与全局变量一样，都是在 “静态存储区” 中分配的。此区域在程序编译时就已经分配好了，且在程序的整个运行期间都存在；\n\n而静态内存是栈中分配的，比如及局部变量。\n\n**使用方法**\n\n```c\nint *p = (int *)malloc(4);\n```\n\n请求系统分配4字节的内存空间，并返回第一字节的地址，然后赋值给指针变量p。当用malloc分配动态内存之后，上面这个指针变量p就被初始化了。\n\n由于malloc返回值类型为 void* 型，所以需要进行<u>类型强制转换</u>，==C语言中，void* 型可以不经转换（系统自动转换）地直接赋给任何类型的指针变量（函数指针变量除外）==。\n\n## void和void*\n\nvoid* 是定义一个无类型的指针变量，它可以指向任何类型的数据。\n\n任何类型的指针变量都可以直接赋给 void* 型的指针变量，无需进行强制类型转换。\n\n不能对 void* 型的指针变量进行运算操作，\n\n原因是，int* 型的指针变量加 1 就是移动 4 个单元，因为 int* 型的指针变量是 int 型数据；但是 void* 型可以指向任何数据类型的数据，所以无法知道 “1” 所表示的是几个内存单元。\n\n>   int *p = (int *)malloc(4);\n\n如上使用方法中，指针变量 p 是静态分配的。\n\n动态分配的内存空间都有一个标志，即都是用一个系统的动态分配函数实现的。\n\n而指针变量 p 使用传统的方式定义的，所以是静态分配的内存空间。\n\n而 p 所指向的内存是动态分配的。\n\n\n\n一个简单的木马程序：内存泄漏\n\n```c\n# include <stdio.h>\n# include <stdlib.h>  //malloc()的头文件\nint main(void)\n{\n    while (1)\n    {\n        int *p = malloc(1000);   \n    }\n    return 0;\n}\n```\n\n当内存全部使用完成后，会启动虚拟内存，\n\n即把硬盘里的一块区域当成内存来使用，\n\n当虚拟内存都用完了，整个系统就死机了。\n\n若为*int*类型时，为增强程序的可移植性，应当如下写法\n\n```c\nint *p = malloc(sizeof(int));\n```\n\nsizeof 的后面可以紧跟类型，也可以直接跟变量名。如果是变量名，那么就表示该变量在内存中所占的字节数。所以 \\*p 是 int 型的，那么 sizeof*p 就表示 int 型变量在内存中所占的字节数。\n\n```c\nint *p = malloc(sizeof*p);\n```\n\n## free函数的使用\n\n```c\n# include <stdlib.h>\nvoid free(void *p);\n```\n\nfree 函数无返回值，它的功能是释放指针变量 p 所指向的内存单元。\n\n此时 p 所指向的那块内存单元将会被释放病患给操作系统，不再归它使用。\n\n操作系统可以重新将它分配给其他变量使用。\n\n释放并不是指清空内存空间，而是指将该内存空间标记为“可用状态”，使操作系统在分配内存时可以将它重新分配给其他变量使用。\n\n指针变量 p 被释放后，任然指向那块内存空间，只是那块内存空间已不属于它。\n\n为避免造成错误，在指针变量被释放后，要立刻把它的指向改为 NULL 。\n\n## 总结\n\nmalloc与ffree一定要成对存在，一一对应。\n\n静态内存是不能用free释放的。\n\n\n\n## 例. 使用malloc创建动态数组\n\n```c\na = (double *) malloc(n * sizeof(double));\t\t\n```\n\n我们用malloc()创建一个数组。除了用malloc()在程序运行时请求一块内存，还需要一个指针记录这块内存的位置。\n\n\n\n```c\ndouble * a;\na = (double *) malloc(30 * sizeof(double));\n```\n\nmalloc()和free()配套使用\nfree()将内存归还内存池\nmalloc()和free()的原型都在stdlib.h头文件中\n使用malloc()，程序可以在运行时才确定数组大小。如下：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\t\t\t// 为malloc(), free()提供原型\n\nint main(void)\n{\n\tdouble * a;\n\tint max;\n\tint number;\n\tint i = 0;\n\tprintf(\"What is the maximum number of type double entries?\\n\");\n\tif(scanf(\"%d\", &max) != 1)\n\t{\n\t\tprintf(\"Number not correctly entered -- bye.\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\ta = (double *) malloc(max * sizeof(double));\n\tif(a == NULL)\n\t{\n\t\tprintf(\"Memory allocation failed. Goodbye.\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\t// a 现在指向有max个元素的数组\n\tprintf(\"Enter the values (q to quit):\\n\");\n\twhile(i < max && scanf(\"%lf\", &a[i]) == 1)\n\t\t++i;\n\tprintf(\"Here are your %d entries:\\n\", number = i);\n\tfor(i = 0; i < number; i++)\n\t{\n\t\tprintf(\"%7.2f \", a[i]);\n\t\tif(i % 7 == 6)\n\t\t\tprintf(\"\\n\");\n\t}\n\tif(i % 7 != 0)\n\t\tprintf(\"\\n\");\n\tprintf(\"Done.\\n\");\n\tfree(a);\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n参考网站：\n\n[C语言 用malloc()创建动态数组](https://blog.csdn.net/weixin_43760909/article/details/87936133)\n\n[动态内存分配，C语言动态内存分配详解 ](http://c.biancheng.net/view/223.html)","source":"_posts/关于C语言动态分配内存.md","raw":"---\ntitle: 关于C语言动态分配内存\nmathjax: true\ndate: 2022-03-10 20:36:49\ntags: [C,malloc,动态分配]\ncategories: C语言\ncomment: true\n---\n## 传统数组的缺点\n\n1.  数组长度必须事先指定，只能是常量，不能是变量；\n2.  长度不能再函数运行的过程中动态地扩充或缩小；\n3.  数组所占内存空间程序员无法手动编程释放；\n\n即静态内存问题\n\n## malloc函数的使用\n\nmalloc 为一个系统函数，它是 memory allocate 的缩写。\n\n其中 memory 是 内存 的意思，\n\nallocate 是 分配 的意思，\n\n即 分配内存 。\n\n```c\n# include <stdlib.h>\nvoid *malloc(unsigned long size);\n```\n\nmalloc 函数只有一个形参，并且是整型。该函数的功能是在内存的动态储存空间即堆中分配一个长度为 size 的连续空间。\n\n函数的返回值是一个指向所分配内存空间起始地址的指针，类型为 void* 型。\n\nmalloc 函数的返回值是一个地址，这个地址就是动态分配的内存空间的起始地址。如果此函数未能成功地执行，\n\n如内存空间不足，则返回空指针 NULL 。\n\n静态变量（关键字为 static）与全局变量一样，都是在 “静态存储区” 中分配的。此区域在程序编译时就已经分配好了，且在程序的整个运行期间都存在；\n\n而静态内存是栈中分配的，比如及局部变量。\n\n**使用方法**\n\n```c\nint *p = (int *)malloc(4);\n```\n\n请求系统分配4字节的内存空间，并返回第一字节的地址，然后赋值给指针变量p。当用malloc分配动态内存之后，上面这个指针变量p就被初始化了。\n\n由于malloc返回值类型为 void* 型，所以需要进行<u>类型强制转换</u>，==C语言中，void* 型可以不经转换（系统自动转换）地直接赋给任何类型的指针变量（函数指针变量除外）==。\n\n## void和void*\n\nvoid* 是定义一个无类型的指针变量，它可以指向任何类型的数据。\n\n任何类型的指针变量都可以直接赋给 void* 型的指针变量，无需进行强制类型转换。\n\n不能对 void* 型的指针变量进行运算操作，\n\n原因是，int* 型的指针变量加 1 就是移动 4 个单元，因为 int* 型的指针变量是 int 型数据；但是 void* 型可以指向任何数据类型的数据，所以无法知道 “1” 所表示的是几个内存单元。\n\n>   int *p = (int *)malloc(4);\n\n如上使用方法中，指针变量 p 是静态分配的。\n\n动态分配的内存空间都有一个标志，即都是用一个系统的动态分配函数实现的。\n\n而指针变量 p 使用传统的方式定义的，所以是静态分配的内存空间。\n\n而 p 所指向的内存是动态分配的。\n\n\n\n一个简单的木马程序：内存泄漏\n\n```c\n# include <stdio.h>\n# include <stdlib.h>  //malloc()的头文件\nint main(void)\n{\n    while (1)\n    {\n        int *p = malloc(1000);   \n    }\n    return 0;\n}\n```\n\n当内存全部使用完成后，会启动虚拟内存，\n\n即把硬盘里的一块区域当成内存来使用，\n\n当虚拟内存都用完了，整个系统就死机了。\n\n若为*int*类型时，为增强程序的可移植性，应当如下写法\n\n```c\nint *p = malloc(sizeof(int));\n```\n\nsizeof 的后面可以紧跟类型，也可以直接跟变量名。如果是变量名，那么就表示该变量在内存中所占的字节数。所以 \\*p 是 int 型的，那么 sizeof*p 就表示 int 型变量在内存中所占的字节数。\n\n```c\nint *p = malloc(sizeof*p);\n```\n\n## free函数的使用\n\n```c\n# include <stdlib.h>\nvoid free(void *p);\n```\n\nfree 函数无返回值，它的功能是释放指针变量 p 所指向的内存单元。\n\n此时 p 所指向的那块内存单元将会被释放病患给操作系统，不再归它使用。\n\n操作系统可以重新将它分配给其他变量使用。\n\n释放并不是指清空内存空间，而是指将该内存空间标记为“可用状态”，使操作系统在分配内存时可以将它重新分配给其他变量使用。\n\n指针变量 p 被释放后，任然指向那块内存空间，只是那块内存空间已不属于它。\n\n为避免造成错误，在指针变量被释放后，要立刻把它的指向改为 NULL 。\n\n## 总结\n\nmalloc与ffree一定要成对存在，一一对应。\n\n静态内存是不能用free释放的。\n\n\n\n## 例. 使用malloc创建动态数组\n\n```c\na = (double *) malloc(n * sizeof(double));\t\t\n```\n\n我们用malloc()创建一个数组。除了用malloc()在程序运行时请求一块内存，还需要一个指针记录这块内存的位置。\n\n\n\n```c\ndouble * a;\na = (double *) malloc(30 * sizeof(double));\n```\n\nmalloc()和free()配套使用\nfree()将内存归还内存池\nmalloc()和free()的原型都在stdlib.h头文件中\n使用malloc()，程序可以在运行时才确定数组大小。如下：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\t\t\t// 为malloc(), free()提供原型\n\nint main(void)\n{\n\tdouble * a;\n\tint max;\n\tint number;\n\tint i = 0;\n\tprintf(\"What is the maximum number of type double entries?\\n\");\n\tif(scanf(\"%d\", &max) != 1)\n\t{\n\t\tprintf(\"Number not correctly entered -- bye.\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\ta = (double *) malloc(max * sizeof(double));\n\tif(a == NULL)\n\t{\n\t\tprintf(\"Memory allocation failed. Goodbye.\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\t// a 现在指向有max个元素的数组\n\tprintf(\"Enter the values (q to quit):\\n\");\n\twhile(i < max && scanf(\"%lf\", &a[i]) == 1)\n\t\t++i;\n\tprintf(\"Here are your %d entries:\\n\", number = i);\n\tfor(i = 0; i < number; i++)\n\t{\n\t\tprintf(\"%7.2f \", a[i]);\n\t\tif(i % 7 == 6)\n\t\t\tprintf(\"\\n\");\n\t}\n\tif(i % 7 != 0)\n\t\tprintf(\"\\n\");\n\tprintf(\"Done.\\n\");\n\tfree(a);\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n参考网站：\n\n[C语言 用malloc()创建动态数组](https://blog.csdn.net/weixin_43760909/article/details/87936133)\n\n[动态内存分配，C语言动态内存分配详解 ](http://c.biancheng.net/view/223.html)","slug":"关于C语言动态分配内存","published":1,"updated":"2022-03-10T14:31:34.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0mpbb3t00095gv9cmu9afvf","content":"<h2 id=\"传统数组的缺点\"><a href=\"#传统数组的缺点\" class=\"headerlink\" title=\"传统数组的缺点\"></a>传统数组的缺点</h2><ol>\n<li> 数组长度必须事先指定，只能是常量，不能是变量；</li>\n<li> 长度不能再函数运行的过程中动态地扩充或缩小；</li>\n<li> 数组所占内存空间程序员无法手动编程释放；</li>\n</ol>\n<p>即静态内存问题</p>\n<h2 id=\"malloc函数的使用\"><a href=\"#malloc函数的使用\" class=\"headerlink\" title=\"malloc函数的使用\"></a>malloc函数的使用</h2><p>malloc 为一个系统函数，它是 memory allocate 的缩写。</p>\n<p>其中 memory 是 内存 的意思，</p>\n<p>allocate 是 分配 的意思，</p>\n<p>即 分配内存 。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>malloc 函数只有一个形参，并且是整型。该函数的功能是在内存的动态储存空间即堆中分配一个长度为 size 的连续空间。</p>\n<p>函数的返回值是一个指向所分配内存空间起始地址的指针，类型为 void* 型。</p>\n<p>malloc 函数的返回值是一个地址，这个地址就是动态分配的内存空间的起始地址。如果此函数未能成功地执行，</p>\n<p>如内存空间不足，则返回空指针 NULL 。</p>\n<p>静态变量（关键字为 static）与全局变量一样，都是在 “静态存储区” 中分配的。此区域在程序编译时就已经分配好了，且在程序的整个运行期间都存在；</p>\n<p>而静态内存是栈中分配的，比如及局部变量。</p>\n<p><strong>使用方法</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>请求系统分配4字节的内存空间，并返回第一字节的地址，然后赋值给指针变量p。当用malloc分配动态内存之后，上面这个指针变量p就被初始化了。</p>\n<p>由于malloc返回值类型为 void* 型，所以需要进行<u>类型强制转换</u>，==C语言中，void* 型可以不经转换（系统自动转换）地直接赋给任何类型的指针变量（函数指针变量除外）==。</p>\n<h2 id=\"void和void\"><a href=\"#void和void\" class=\"headerlink\" title=\"void和void*\"></a>void和void*</h2><p>void* 是定义一个无类型的指针变量，它可以指向任何类型的数据。</p>\n<p>任何类型的指针变量都可以直接赋给 void* 型的指针变量，无需进行强制类型转换。</p>\n<p>不能对 void* 型的指针变量进行运算操作，</p>\n<p>原因是，int* 型的指针变量加 1 就是移动 4 个单元，因为 int* 型的指针变量是 int 型数据；但是 void* 型可以指向任何数据类型的数据，所以无法知道 “1” 所表示的是几个内存单元。</p>\n<blockquote>\n<p>  int *p = (int *)malloc(4);</p>\n</blockquote>\n<p>如上使用方法中，指针变量 p 是静态分配的。</p>\n<p>动态分配的内存空间都有一个标志，即都是用一个系统的动态分配函数实现的。</p>\n<p>而指针变量 p 使用传统的方式定义的，所以是静态分配的内存空间。</p>\n<p>而 p 所指向的内存是动态分配的。</p>\n<p>一个简单的木马程序：内存泄漏</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span>  <span class=\"comment\">//malloc()的头文件</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">int</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"number\">1000</span>);   </span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>当内存全部使用完成后，会启动虚拟内存，</p>\n<p>即把硬盘里的一块区域当成内存来使用，</p>\n<p>当虚拟内存都用完了，整个系统就死机了。</p>\n<p>若为<em>int</em>类型时，为增强程序的可移植性，应当如下写法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br></pre></td></tr></table></figure>\n\n<p>sizeof 的后面可以紧跟类型，也可以直接跟变量名。如果是变量名，那么就表示该变量在内存中所占的字节数。所以 *p 是 int 型的，那么 sizeof*p 就表示 int 型变量在内存中所占的字节数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>*p);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"free函数的使用\"><a href=\"#free函数的使用\" class=\"headerlink\" title=\"free函数的使用\"></a>free函数的使用</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">free</span><span class=\"params\">(<span class=\"keyword\">void</span> *p)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>free 函数无返回值，它的功能是释放指针变量 p 所指向的内存单元。</p>\n<p>此时 p 所指向的那块内存单元将会被释放病患给操作系统，不再归它使用。</p>\n<p>操作系统可以重新将它分配给其他变量使用。</p>\n<p>释放并不是指清空内存空间，而是指将该内存空间标记为“可用状态”，使操作系统在分配内存时可以将它重新分配给其他变量使用。</p>\n<p>指针变量 p 被释放后，任然指向那块内存空间，只是那块内存空间已不属于它。</p>\n<p>为避免造成错误，在指针变量被释放后，要立刻把它的指向改为 NULL 。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>malloc与ffree一定要成对存在，一一对应。</p>\n<p>静态内存是不能用free释放的。</p>\n<h2 id=\"例-使用malloc创建动态数组\"><a href=\"#例-使用malloc创建动态数组\" class=\"headerlink\" title=\"例. 使用malloc创建动态数组\"></a>例. 使用malloc创建动态数组</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (<span class=\"keyword\">double</span> *) <span class=\"built_in\">malloc</span>(n * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>));\t\t</span><br></pre></td></tr></table></figure>\n\n<p>我们用malloc()创建一个数组。除了用malloc()在程序运行时请求一块内存，还需要一个指针记录这块内存的位置。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> * a;</span><br><span class=\"line\">a = (<span class=\"keyword\">double</span> *) <span class=\"built_in\">malloc</span>(<span class=\"number\">30</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>));</span><br></pre></td></tr></table></figure>\n\n<p>malloc()和free()配套使用<br>free()将内存归还内存池<br>malloc()和free()的原型都在stdlib.h头文件中<br>使用malloc()，程序可以在运行时才确定数组大小。如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span>\t\t\t<span class=\"comment\">// 为malloc(), free()提供原型</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> * a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"What is the maximum number of type double entries?\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;max) != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Number not correctly entered -- bye.\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\ta = (<span class=\"keyword\">double</span> *) <span class=\"built_in\">malloc</span>(max * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Memory allocation failed. Goodbye.\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"comment\">// a 现在指向有max个元素的数组</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the values (q to quit):\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; max &amp;&amp; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, &amp;a[i]) == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Here are your %d entries:\\n\"</span>, number = i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; number; i++)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%7.2f \"</span>, a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i % <span class=\"number\">7</span> == <span class=\"number\">6</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i % <span class=\"number\">7</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Done.\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>参考网站：</p>\n<p><a class=\"link\" href=\"https://blog.csdn.net/weixin_43760909/article/details/87936133\">C语言 用malloc()创建动态数组<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"http://c.biancheng.net/view/223.html\">动态内存分配，C语言动态内存分配详解 <i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<h2 id=\"传统数组的缺点\"><a href=\"#传统数组的缺点\" class=\"headerlink\" title=\"传统数组的缺点\"></a>传统数组的缺点</h2><ol>\n<li> 数组长度必须事先指定，只能是常量，不能是变量；</li>\n<li> 长度不能再函数运行的过程中动态地扩充或缩小；</li>\n<li> 数组所占内存空间程序员无法手动编程释放；</li>\n</ol>\n<p>即静态内存问题</p>\n<h2 id=\"malloc函数的使用\"><a href=\"#malloc函数的使用\" class=\"headerlink\" title=\"malloc函数的使用\"></a>malloc函数的使用</h2><p>malloc 为一个系统函数，它是 memory allocate 的缩写。</p>\n<p>其中 memory 是 内存 的意思，</p>\n<p>allocate 是 分配 的意思，</p>\n<p>即 分配内存 。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>malloc 函数只有一个形参，并且是整型。该函数的功能是在内存的动态储存空间即堆中分配一个长度为 size 的连续空间。</p>\n<p>函数的返回值是一个指向所分配内存空间起始地址的指针，类型为 void* 型。</p>\n<p>malloc 函数的返回值是一个地址，这个地址就是动态分配的内存空间的起始地址。如果此函数未能成功地执行，</p>\n<p>如内存空间不足，则返回空指针 NULL 。</p>\n<p>静态变量（关键字为 static）与全局变量一样，都是在 “静态存储区” 中分配的。此区域在程序编译时就已经分配好了，且在程序的整个运行期间都存在；</p>\n<p>而静态内存是栈中分配的，比如及局部变量。</p>\n<p><strong>使用方法</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>请求系统分配4字节的内存空间，并返回第一字节的地址，然后赋值给指针变量p。当用malloc分配动态内存之后，上面这个指针变量p就被初始化了。</p>\n<p>由于malloc返回值类型为 void* 型，所以需要进行<u>类型强制转换</u>，==C语言中，void* 型可以不经转换（系统自动转换）地直接赋给任何类型的指针变量（函数指针变量除外）==。</p>\n<h2 id=\"void和void\"><a href=\"#void和void\" class=\"headerlink\" title=\"void和void*\"></a>void和void*</h2><p>void* 是定义一个无类型的指针变量，它可以指向任何类型的数据。</p>\n<p>任何类型的指针变量都可以直接赋给 void* 型的指针变量，无需进行强制类型转换。</p>\n<p>不能对 void* 型的指针变量进行运算操作，</p>\n<p>原因是，int* 型的指针变量加 1 就是移动 4 个单元，因为 int* 型的指针变量是 int 型数据；但是 void* 型可以指向任何数据类型的数据，所以无法知道 “1” 所表示的是几个内存单元。</p>\n<blockquote>\n<p>  int *p = (int *)malloc(4);</p>\n</blockquote>\n<p>如上使用方法中，指针变量 p 是静态分配的。</p>\n<p>动态分配的内存空间都有一个标志，即都是用一个系统的动态分配函数实现的。</p>\n<p>而指针变量 p 使用传统的方式定义的，所以是静态分配的内存空间。</p>\n<p>而 p 所指向的内存是动态分配的。</p>\n<p>一个简单的木马程序：内存泄漏</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span>  <span class=\"comment\">//malloc()的头文件</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">int</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"number\">1000</span>);   </span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>当内存全部使用完成后，会启动虚拟内存，</p>\n<p>即把硬盘里的一块区域当成内存来使用，</p>\n<p>当虚拟内存都用完了，整个系统就死机了。</p>\n<p>若为<em>int</em>类型时，为增强程序的可移植性，应当如下写法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br></pre></td></tr></table></figure>\n\n<p>sizeof 的后面可以紧跟类型，也可以直接跟变量名。如果是变量名，那么就表示该变量在内存中所占的字节数。所以 *p 是 int 型的，那么 sizeof*p 就表示 int 型变量在内存中所占的字节数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>*p);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"free函数的使用\"><a href=\"#free函数的使用\" class=\"headerlink\" title=\"free函数的使用\"></a>free函数的使用</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">free</span><span class=\"params\">(<span class=\"keyword\">void</span> *p)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>free 函数无返回值，它的功能是释放指针变量 p 所指向的内存单元。</p>\n<p>此时 p 所指向的那块内存单元将会被释放病患给操作系统，不再归它使用。</p>\n<p>操作系统可以重新将它分配给其他变量使用。</p>\n<p>释放并不是指清空内存空间，而是指将该内存空间标记为“可用状态”，使操作系统在分配内存时可以将它重新分配给其他变量使用。</p>\n<p>指针变量 p 被释放后，任然指向那块内存空间，只是那块内存空间已不属于它。</p>\n<p>为避免造成错误，在指针变量被释放后，要立刻把它的指向改为 NULL 。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>malloc与ffree一定要成对存在，一一对应。</p>\n<p>静态内存是不能用free释放的。</p>\n<h2 id=\"例-使用malloc创建动态数组\"><a href=\"#例-使用malloc创建动态数组\" class=\"headerlink\" title=\"例. 使用malloc创建动态数组\"></a>例. 使用malloc创建动态数组</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (<span class=\"keyword\">double</span> *) <span class=\"built_in\">malloc</span>(n * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>));\t\t</span><br></pre></td></tr></table></figure>\n\n<p>我们用malloc()创建一个数组。除了用malloc()在程序运行时请求一块内存，还需要一个指针记录这块内存的位置。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> * a;</span><br><span class=\"line\">a = (<span class=\"keyword\">double</span> *) <span class=\"built_in\">malloc</span>(<span class=\"number\">30</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>));</span><br></pre></td></tr></table></figure>\n\n<p>malloc()和free()配套使用<br>free()将内存归还内存池<br>malloc()和free()的原型都在stdlib.h头文件中<br>使用malloc()，程序可以在运行时才确定数组大小。如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span>\t\t\t<span class=\"comment\">// 为malloc(), free()提供原型</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> * a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"What is the maximum number of type double entries?\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;max) != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Number not correctly entered -- bye.\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\ta = (<span class=\"keyword\">double</span> *) <span class=\"built_in\">malloc</span>(max * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Memory allocation failed. Goodbye.\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"comment\">// a 现在指向有max个元素的数组</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the values (q to quit):\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; max &amp;&amp; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, &amp;a[i]) == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t++i;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Here are your %d entries:\\n\"</span>, number = i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; number; i++)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%7.2f \"</span>, a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i % <span class=\"number\">7</span> == <span class=\"number\">6</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i % <span class=\"number\">7</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Done.\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>参考网站：</p>\n<p><a class=\"link\" href=\"https://blog.csdn.net/weixin_43760909/article/details/87936133\">C语言 用malloc()创建动态数组<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"http://c.biancheng.net/view/223.html\">动态内存分配，C语言动态内存分配详解 <i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"如何搭建自己的Blog","mathjax":true,"date":"2022-03-10T14:34:51.000Z","comment":true,"_content":"\n# #前言\n\n>   本文旨在将搭建本**Blog**的流程记录下来，并且让更多比我还小白的小白能看得明白\n>\n>   （也方便以后自己更改调试这些页面...），本文作者相关的基础也还在学习中，\n>\n>   有错误欢迎大家指正，文中出现的参考网站等，将会写在文末。\n\n# 0. 简介\n\n## 0.1 What is GitHub Pages？\n\n**GitHub Pages** 是 **Github** 官方提供的免费的静态站点托管服务，通过 **GitHub 仓库** 托管与发布我们的静态网站页面，这样我们基本不用操心维护的问题。\n\n这种方式的缺点就是，在国内访问 **Github** 的速度有点 ... \n\n[Know More](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages)\n\n在不运用 **Vercle** 的时候我们使用此种方法。\n\n本篇文章将着重讲三者（**GitHub + Hexo +Vercel**）同时使用的配置流程。\n\n## 0.2 What is Hexo？\n\n**Hexo** 是一个静态博客框架，基于 **Node.js** 运行，可以将我们撰写的 **Markdown** 文档（.md）解析渲染成静态的 **HTML** 网页，我所使用的写 **Markdown** 软件是 **Typora**。\t\n\n[Know More](https://hexo.io/zh-cn/)\n\n## 0.3 What is vercel？\n\n**Vercel** 是一家提供静态网站托管的云平台，能从 **Github** 仓库中拉取代码，能够有效地提升我们访问网站的速度。\n\n[Know More](https://vercel.com/)\n\n## 0.4 How they work？\n\n本地撰写好 **Markdown** 格式文章后，通过 **Hexo** 解析文档，渲染生成各类主题样式的 **HTML** [静态网页](https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/6327183)，再上传到 **GitHub** **Repo** 中，**Vercel** 通过拉拉取 **GitHub** **库** 中的数据以供访客访问。\n\n<img src = 'https://s3.bmp.ovh/imgs/2022/03/40038a04b8da3713.png' />\n\n----------------------\n\n# 1. 基础准备\n\n## 1.1 环境搭建\n\n安装**Node.js** + 安装**Git**\n\n[Node.js](https://nodejs.org/zh-cn)\n\n[Git](https://git-scm.com/downloads)\n\n安装完成后，用**Win** + **R** 键输入 **cmd** 并打开，\n\n在命令框内输入 **node -v** 如果出现版本号则表示安装成功，\n\n<img src = 'https://i.bmp.ovh/imgs/2022/03/182b37ed66fe4298.png' />\n\n输入 **npm install -g yarn** 安装 **yarn**，\n\n完成后同理检查版本已确认安装。\n\n使用 **git --version** 完成检查。\n\n## 1.2 账号注册\n\n**Github**账号 + **vercel**账号 \n\n## 1.3 域名准备\n\n这个环节可有可无，感兴趣可以自己买一个域名...\n\n这样就可以不用 **Vercel** 给出的。\n\n------------------------------\n\n# 2. 搭建步骤\n\n## 2.1 连接GitHub\n\n新建一个名为“**Blog**”的文件夹，\n\n如果出现如下类似问题（即误操作权限等问题），\n\n![](https://s3.bmp.ovh/imgs/2022/03/2b93afa21cdfea92.jpg)\n\n分别给 **Node**、Git 与 我们创建的 **Blog** 文件夹管理员权限。\n\n在文件夹内右键打开 “**Git Bash Here**”，\n\n不然在创建<u>SSH密钥</u>时很可能出现 “**unknown key type -rsa**” 的错误。\n\n在控制台内一次输入以下命令，\n\n`git config --global user.name \"GitHub 用户名\"`\n`git config --global user.email \"GitHub 邮箱\"`\n\n## 2.2 SSH密钥\n\n### 2.2.1 创建密钥\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`\n\n之后只需要摁4次回车就🆗；\n\n## 2.2.2 添加密钥\n\n通过资源管理器进入如下目录 **[C:\\Users\\用户名\\\\.ssh]** （此处记得勾选“隐藏的项目”），\n\n用记事本打开公钥 **id_rsa.pub** 文件 **Ctrl + A** 选择全部，复制内容。\n\n登录**GitHub**，进入 **Settings** 界面，选择左栏的 **SSH and GPG  keys**，\n\n选择 **New SSH key** ，**Title** 随便填写，\n\n将 **id_rua.pub** ，将内容复制进 “**Key**”，\n\n<img src = 'https://s3.bmp.ovh/imgs/2022/03/be87470507217303.png' />\n\n这步以后，会出现一长串 **SSH** 密钥 ，在之后我们会用上。\n\n## 2.3 进行连接\n\n右键桌面空白部分，选择打开 **Git Bash** ，输入\n\n`ssh -T git@github.com`\n\n出现 “Are you sure......”等字样，输入 **yes**  回车确认。\n\n显示“You’ve successfully......”等字样即连接成功。\n\n## 2.3 创建Git Repo\n\n在**GitHub**界面点击如下图所示 “**new repository**” 新建仓库，\n\n![](https://i.bmp.ovh/imgs/2022/03/75160d297ca82600.png)\n\n填写方式如下，\n\n**README.md **可以不用勾选。\n\n<img src = 'https://s3.bmp.ovh/imgs/2022/03/88161a9d9dbd2cfa.png' />\n\n## 2.4 Hexo配置\n\n### 2.4.1 安装 Hexo\n\n使用 **npm** 安装程序\n\n```text\nnpm install -g hexo\n```\n\n等待其安装完毕，时间也许会有点久...耐心等一下...\n\n### 2.4.2 初始化\n\n输入指令初始化，\n\n`hexo init`\n\n这时我们创建的**Blog**文件夹内会出现**Hexo**的各种文件，\n\n结构如下\n\n+   \\_config.yml\t\t# 配置文件\n+   package.json       \t\t# 应用程序信息\n+   scaffolds\t\t          # 模板\n+   source \t\t\t        # 存放用户资源，文档等\n    +   \\_drafts\n    +   \\_posts\n+   themes \t\t\t       # 主题文件夹\n+   public\t\t\t       # 网站文件\n\n输入如下指令，生成静态网页，\n\n`hexo g`\n\n输入如下指令，可以访问 http://localhost:4000 在本地预览页面，\n\n`hexo server`\n\n按 **Ctrl + C** 关闭服务器。\n\n## 2.5 上传至GitHub Repo\n\n这部分属于**Git**的用法，本篇文章仅展示流程。\n\n（我也不是理解的特别透彻，就不班门弄斧了🙏）\n\n[Learn more]((https://zhuanlan.zhihu.com/p/21193604))\n\n初始化**Git**\n\n`git init`\n\n选择当前文件夹所有的文件，\n\n`git add .`\n\n将选择追踪的文件全部加入<u>缓冲区</u>，\n\n注释随意填写但不能为空，\n\n`git commit -am “注释（代码提交信息）”`\n\n创建**main**分支，\n\n`git branch -M main`\n\n<u>链接</u>即为自己**GitHub Repo**的<u>SSH</u>，如下图，\n\n![](https://i.bmp.ovh/imgs/2022/03/c4fb128a4b566dcd.png)\n\n确定连接至**Github** **Repo** ，\n\n`git remote add origin “链接”`\n\n这步结束以后会要求我们输入我们的 <u>SSH私钥</u>，\n\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/2940c32df77479f1.png\" />\n\n上传缓冲区的文件至**GitHub Repo**中的**main**分支，\n\n`git push -u origin main`\n\n这一步千万千万不要上传到**master**！！！\n\n<center>千万不要！！！<center/>\n\n## 2.6 Vercel配置\n\n![](https://s3.bmp.ovh/imgs/2022/03/d0ec96c7463c99b2.png)\n\n选择 “**Browse All Templates**” -> 选择 “**Hexo**” 模板\n\n![](https://s3.bmp.ovh/imgs/2022/03/fe3685a4793c1cbc.png)\n\n在此页面选择 “**Import a different Git Repository**”\n\n选择我们最开始创建的 **GitHub Repo** 点击 “**Import**”\n\n点击 “**Deploy**” 完成部署，\n\n最后可通过图中连接进行访问我们的主页。\n\n![](https://s3.bmp.ovh/imgs/2022/03/56d9cee4ac785336.png)\n\n------------------------------------\n\n# 3. 后期运营\n\n我们搭建 **Blog** 在此就已经大体上搭建好了，\n\n后期就是我们自己上传文章、配置各类文件或者使用主题进行美化等等。\n\n## 3.1 新建文章\n\n使用以下命令新建文章，\n\n`hexo new post 文章名`\n\n文章的模板储存在 “**scaffolds**” 文件夹中，可以更换里边的模板，\n\n以更改我们创建的初始文章格式。\n\n## 3.2 新建页面\n\n使用以下命令新建页面，\n\n`hexo new page 页面名`\n\n模板储存同上。\n\n## 3.3 上传页面\n\n在我们在本地更新完页面以后，\n\n文章储存在“**Blog\\source\\\\_posts**” 中，\n\n当我们更新完文件并生成静态页面以后，\n\n依次使用\n\n`git add .`\n\n`git commit -am “注释”`\n\n`git push -u origin main`\n\n进行上传，**vercel** 将会自动部署。\n\n## 3.4 清除页面\n\n修改并部署后没有效果，\n\n使用如下指令进行清除，然后再重新生成部署，\n\n`hexo clean`\n\n## 3.5 主题下载\n\n在[Themes | Hexo](https://hexo.io/themes/)可以选择自己喜欢的主题，并在 **Blog** 文件夹页面，通过 **Git Bash Here** 进行下载，在相关的主题介绍内有其具体详细的介绍，在此就不多赘述。\n\n---------------------------\n\n# *4. 域名更换\n\n## *4.1 Vercel配置\n\n如果我们购买了自己的域名，我们可以在\n\n菜单栏中的 **Domain** 中点击 **Add**\n\n选择我们要绑定的项目（即**Blog**），\n\n点击 **Continue** ，\n\n输入我们的 **域名 + 后缀** ，\n\n添加完毕后会显示如下图的界面。\n\n![](https://s3.bmp.ovh/imgs/2022/03/c44c3ef8c7d90e50.png)\n\n## *4.2 DNS解析\n\n进入我们的域名管理界面，\n\n选择 “**DNS 解析**“ -> ”**域名解析**“，\n\n\n\n![](https://s3.bmp.ovh/imgs/2022/03/daf5d128c5a5cfb1.png)\n\n如图进行添加，我们就能够通过我们自己的域名访问**Blog**了。\n\n--------------------------------------\n\n# #结语\n\n总的来说全程都是免费的，不花一分钱....这种方式并没有用到**GitHub Pages**，如果对这种方式该兴趣的可以看看参考网站的第一个。\n\n这种方式写博客较为稳定，但是上传的过程会略显麻烦，却能在过程中学到很多的东西。\n\n本篇文章也许有些地方还不够详尽，欢迎大家提出进行进一步修改，共同进步。\n\n<img src=\"bg.png\"  width=\"360\"  height = \"450\" />\n\n\n\n\n\n\n\n\n\n\n\n参考网站：\n\n[使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/60578464)\n\n[静态网页 ](https://cn.bing.com/search?q=%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5&cvid=d95f1ce54fda4d2dbdadf30305e9e274&aqs=edge..69i57.2690j0j1&pglt=171&FORM=ANNTA1&PC=ASTS)\n\n[About GitHub Pages - GitHub Docs](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages)\n\n[Hexo](https://hexo.io/zh-cn/)\n\n[vercel](https://vercel.com/)\n\n[git - 入门指南 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/21193604)\n\n[Vercel绑定个人域名 | Aymeticの小窝](https://aymetic.com/post/935c9419)","source":"_posts/如何搭建自己的Blog.md","raw":"---\ntitle: 如何搭建自己的Blog\nmathjax: true\ndate: 2022-03-10 22:34:51\ntags: [Hexo,Github,Vercel,Blog]\ncategories: [Hexo]\ncomment: true\n---\n\n# #前言\n\n>   本文旨在将搭建本**Blog**的流程记录下来，并且让更多比我还小白的小白能看得明白\n>\n>   （也方便以后自己更改调试这些页面...），本文作者相关的基础也还在学习中，\n>\n>   有错误欢迎大家指正，文中出现的参考网站等，将会写在文末。\n\n# 0. 简介\n\n## 0.1 What is GitHub Pages？\n\n**GitHub Pages** 是 **Github** 官方提供的免费的静态站点托管服务，通过 **GitHub 仓库** 托管与发布我们的静态网站页面，这样我们基本不用操心维护的问题。\n\n这种方式的缺点就是，在国内访问 **Github** 的速度有点 ... \n\n[Know More](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages)\n\n在不运用 **Vercle** 的时候我们使用此种方法。\n\n本篇文章将着重讲三者（**GitHub + Hexo +Vercel**）同时使用的配置流程。\n\n## 0.2 What is Hexo？\n\n**Hexo** 是一个静态博客框架，基于 **Node.js** 运行，可以将我们撰写的 **Markdown** 文档（.md）解析渲染成静态的 **HTML** 网页，我所使用的写 **Markdown** 软件是 **Typora**。\t\n\n[Know More](https://hexo.io/zh-cn/)\n\n## 0.3 What is vercel？\n\n**Vercel** 是一家提供静态网站托管的云平台，能从 **Github** 仓库中拉取代码，能够有效地提升我们访问网站的速度。\n\n[Know More](https://vercel.com/)\n\n## 0.4 How they work？\n\n本地撰写好 **Markdown** 格式文章后，通过 **Hexo** 解析文档，渲染生成各类主题样式的 **HTML** [静态网页](https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/6327183)，再上传到 **GitHub** **Repo** 中，**Vercel** 通过拉拉取 **GitHub** **库** 中的数据以供访客访问。\n\n<img src = 'https://s3.bmp.ovh/imgs/2022/03/40038a04b8da3713.png' />\n\n----------------------\n\n# 1. 基础准备\n\n## 1.1 环境搭建\n\n安装**Node.js** + 安装**Git**\n\n[Node.js](https://nodejs.org/zh-cn)\n\n[Git](https://git-scm.com/downloads)\n\n安装完成后，用**Win** + **R** 键输入 **cmd** 并打开，\n\n在命令框内输入 **node -v** 如果出现版本号则表示安装成功，\n\n<img src = 'https://i.bmp.ovh/imgs/2022/03/182b37ed66fe4298.png' />\n\n输入 **npm install -g yarn** 安装 **yarn**，\n\n完成后同理检查版本已确认安装。\n\n使用 **git --version** 完成检查。\n\n## 1.2 账号注册\n\n**Github**账号 + **vercel**账号 \n\n## 1.3 域名准备\n\n这个环节可有可无，感兴趣可以自己买一个域名...\n\n这样就可以不用 **Vercel** 给出的。\n\n------------------------------\n\n# 2. 搭建步骤\n\n## 2.1 连接GitHub\n\n新建一个名为“**Blog**”的文件夹，\n\n如果出现如下类似问题（即误操作权限等问题），\n\n![](https://s3.bmp.ovh/imgs/2022/03/2b93afa21cdfea92.jpg)\n\n分别给 **Node**、Git 与 我们创建的 **Blog** 文件夹管理员权限。\n\n在文件夹内右键打开 “**Git Bash Here**”，\n\n不然在创建<u>SSH密钥</u>时很可能出现 “**unknown key type -rsa**” 的错误。\n\n在控制台内一次输入以下命令，\n\n`git config --global user.name \"GitHub 用户名\"`\n`git config --global user.email \"GitHub 邮箱\"`\n\n## 2.2 SSH密钥\n\n### 2.2.1 创建密钥\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`\n\n之后只需要摁4次回车就🆗；\n\n## 2.2.2 添加密钥\n\n通过资源管理器进入如下目录 **[C:\\Users\\用户名\\\\.ssh]** （此处记得勾选“隐藏的项目”），\n\n用记事本打开公钥 **id_rsa.pub** 文件 **Ctrl + A** 选择全部，复制内容。\n\n登录**GitHub**，进入 **Settings** 界面，选择左栏的 **SSH and GPG  keys**，\n\n选择 **New SSH key** ，**Title** 随便填写，\n\n将 **id_rua.pub** ，将内容复制进 “**Key**”，\n\n<img src = 'https://s3.bmp.ovh/imgs/2022/03/be87470507217303.png' />\n\n这步以后，会出现一长串 **SSH** 密钥 ，在之后我们会用上。\n\n## 2.3 进行连接\n\n右键桌面空白部分，选择打开 **Git Bash** ，输入\n\n`ssh -T git@github.com`\n\n出现 “Are you sure......”等字样，输入 **yes**  回车确认。\n\n显示“You’ve successfully......”等字样即连接成功。\n\n## 2.3 创建Git Repo\n\n在**GitHub**界面点击如下图所示 “**new repository**” 新建仓库，\n\n![](https://i.bmp.ovh/imgs/2022/03/75160d297ca82600.png)\n\n填写方式如下，\n\n**README.md **可以不用勾选。\n\n<img src = 'https://s3.bmp.ovh/imgs/2022/03/88161a9d9dbd2cfa.png' />\n\n## 2.4 Hexo配置\n\n### 2.4.1 安装 Hexo\n\n使用 **npm** 安装程序\n\n```text\nnpm install -g hexo\n```\n\n等待其安装完毕，时间也许会有点久...耐心等一下...\n\n### 2.4.2 初始化\n\n输入指令初始化，\n\n`hexo init`\n\n这时我们创建的**Blog**文件夹内会出现**Hexo**的各种文件，\n\n结构如下\n\n+   \\_config.yml\t\t# 配置文件\n+   package.json       \t\t# 应用程序信息\n+   scaffolds\t\t          # 模板\n+   source \t\t\t        # 存放用户资源，文档等\n    +   \\_drafts\n    +   \\_posts\n+   themes \t\t\t       # 主题文件夹\n+   public\t\t\t       # 网站文件\n\n输入如下指令，生成静态网页，\n\n`hexo g`\n\n输入如下指令，可以访问 http://localhost:4000 在本地预览页面，\n\n`hexo server`\n\n按 **Ctrl + C** 关闭服务器。\n\n## 2.5 上传至GitHub Repo\n\n这部分属于**Git**的用法，本篇文章仅展示流程。\n\n（我也不是理解的特别透彻，就不班门弄斧了🙏）\n\n[Learn more]((https://zhuanlan.zhihu.com/p/21193604))\n\n初始化**Git**\n\n`git init`\n\n选择当前文件夹所有的文件，\n\n`git add .`\n\n将选择追踪的文件全部加入<u>缓冲区</u>，\n\n注释随意填写但不能为空，\n\n`git commit -am “注释（代码提交信息）”`\n\n创建**main**分支，\n\n`git branch -M main`\n\n<u>链接</u>即为自己**GitHub Repo**的<u>SSH</u>，如下图，\n\n![](https://i.bmp.ovh/imgs/2022/03/c4fb128a4b566dcd.png)\n\n确定连接至**Github** **Repo** ，\n\n`git remote add origin “链接”`\n\n这步结束以后会要求我们输入我们的 <u>SSH私钥</u>，\n\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/2940c32df77479f1.png\" />\n\n上传缓冲区的文件至**GitHub Repo**中的**main**分支，\n\n`git push -u origin main`\n\n这一步千万千万不要上传到**master**！！！\n\n<center>千万不要！！！<center/>\n\n## 2.6 Vercel配置\n\n![](https://s3.bmp.ovh/imgs/2022/03/d0ec96c7463c99b2.png)\n\n选择 “**Browse All Templates**” -> 选择 “**Hexo**” 模板\n\n![](https://s3.bmp.ovh/imgs/2022/03/fe3685a4793c1cbc.png)\n\n在此页面选择 “**Import a different Git Repository**”\n\n选择我们最开始创建的 **GitHub Repo** 点击 “**Import**”\n\n点击 “**Deploy**” 完成部署，\n\n最后可通过图中连接进行访问我们的主页。\n\n![](https://s3.bmp.ovh/imgs/2022/03/56d9cee4ac785336.png)\n\n------------------------------------\n\n# 3. 后期运营\n\n我们搭建 **Blog** 在此就已经大体上搭建好了，\n\n后期就是我们自己上传文章、配置各类文件或者使用主题进行美化等等。\n\n## 3.1 新建文章\n\n使用以下命令新建文章，\n\n`hexo new post 文章名`\n\n文章的模板储存在 “**scaffolds**” 文件夹中，可以更换里边的模板，\n\n以更改我们创建的初始文章格式。\n\n## 3.2 新建页面\n\n使用以下命令新建页面，\n\n`hexo new page 页面名`\n\n模板储存同上。\n\n## 3.3 上传页面\n\n在我们在本地更新完页面以后，\n\n文章储存在“**Blog\\source\\\\_posts**” 中，\n\n当我们更新完文件并生成静态页面以后，\n\n依次使用\n\n`git add .`\n\n`git commit -am “注释”`\n\n`git push -u origin main`\n\n进行上传，**vercel** 将会自动部署。\n\n## 3.4 清除页面\n\n修改并部署后没有效果，\n\n使用如下指令进行清除，然后再重新生成部署，\n\n`hexo clean`\n\n## 3.5 主题下载\n\n在[Themes | Hexo](https://hexo.io/themes/)可以选择自己喜欢的主题，并在 **Blog** 文件夹页面，通过 **Git Bash Here** 进行下载，在相关的主题介绍内有其具体详细的介绍，在此就不多赘述。\n\n---------------------------\n\n# *4. 域名更换\n\n## *4.1 Vercel配置\n\n如果我们购买了自己的域名，我们可以在\n\n菜单栏中的 **Domain** 中点击 **Add**\n\n选择我们要绑定的项目（即**Blog**），\n\n点击 **Continue** ，\n\n输入我们的 **域名 + 后缀** ，\n\n添加完毕后会显示如下图的界面。\n\n![](https://s3.bmp.ovh/imgs/2022/03/c44c3ef8c7d90e50.png)\n\n## *4.2 DNS解析\n\n进入我们的域名管理界面，\n\n选择 “**DNS 解析**“ -> ”**域名解析**“，\n\n\n\n![](https://s3.bmp.ovh/imgs/2022/03/daf5d128c5a5cfb1.png)\n\n如图进行添加，我们就能够通过我们自己的域名访问**Blog**了。\n\n--------------------------------------\n\n# #结语\n\n总的来说全程都是免费的，不花一分钱....这种方式并没有用到**GitHub Pages**，如果对这种方式该兴趣的可以看看参考网站的第一个。\n\n这种方式写博客较为稳定，但是上传的过程会略显麻烦，却能在过程中学到很多的东西。\n\n本篇文章也许有些地方还不够详尽，欢迎大家提出进行进一步修改，共同进步。\n\n<img src=\"bg.png\"  width=\"360\"  height = \"450\" />\n\n\n\n\n\n\n\n\n\n\n\n参考网站：\n\n[使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/60578464)\n\n[静态网页 ](https://cn.bing.com/search?q=%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5&cvid=d95f1ce54fda4d2dbdadf30305e9e274&aqs=edge..69i57.2690j0j1&pglt=171&FORM=ANNTA1&PC=ASTS)\n\n[About GitHub Pages - GitHub Docs](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages)\n\n[Hexo](https://hexo.io/zh-cn/)\n\n[vercel](https://vercel.com/)\n\n[git - 入门指南 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/21193604)\n\n[Vercel绑定个人域名 | Aymeticの小窝](https://aymetic.com/post/935c9419)","slug":"如何搭建自己的Blog","published":1,"updated":"2022-03-11T17:34:38.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0mpbb3u000b5gv9drrna7d1","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"#前言\"></a>#前言</h1><blockquote>\n<p>  本文旨在将搭建本<strong>Blog</strong>的流程记录下来，并且让更多比我还小白的小白能看得明白</p>\n<p>  （也方便以后自己更改调试这些页面…），本文作者相关的基础也还在学习中，</p>\n<p>  有错误欢迎大家指正，文中出现的参考网站等，将会写在文末。</p>\n</blockquote>\n<h1 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0. 简介\"></a>0. 简介</h1><h2 id=\"0-1-What-is-GitHub-Pages？\"><a href=\"#0-1-What-is-GitHub-Pages？\" class=\"headerlink\" title=\"0.1 What is GitHub Pages？\"></a>0.1 What is GitHub Pages？</h2><p><strong>GitHub Pages</strong> 是 <strong>Github</strong> 官方提供的免费的静态站点托管服务，通过 <strong>GitHub 仓库</strong> 托管与发布我们的静态网站页面，这样我们基本不用操心维护的问题。</p>\n<p>这种方式的缺点就是，在国内访问 <strong>Github</strong> 的速度有点 … </p>\n<p><a class=\"link\" href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\">Know More<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>在不运用 <strong>Vercle</strong> 的时候我们使用此种方法。</p>\n<p>本篇文章将着重讲三者（<strong>GitHub + Hexo +Vercel</strong>）同时使用的配置流程。</p>\n<h2 id=\"0-2-What-is-Hexo？\"><a href=\"#0-2-What-is-Hexo？\" class=\"headerlink\" title=\"0.2 What is Hexo？\"></a>0.2 What is Hexo？</h2><p><strong>Hexo</strong> 是一个静态博客框架，基于 <strong>Node.js</strong> 运行，可以将我们撰写的 <strong>Markdown</strong> 文档（.md）解析渲染成静态的 <strong>HTML</strong> 网页，我所使用的写 <strong>Markdown</strong> 软件是 <strong>Typora</strong>。    </p>\n<p><a class=\"link\" href=\"https://hexo.io/zh-cn/\">Know More<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"0-3-What-is-vercel？\"><a href=\"#0-3-What-is-vercel？\" class=\"headerlink\" title=\"0.3 What is vercel？\"></a>0.3 What is vercel？</h2><p><strong>Vercel</strong> 是一家提供静态网站托管的云平台，能从 <strong>Github</strong> 仓库中拉取代码，能够有效地提升我们访问网站的速度。</p>\n<p><a class=\"link\" href=\"https://vercel.com/\">Know More<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"0-4-How-they-work？\"><a href=\"#0-4-How-they-work？\" class=\"headerlink\" title=\"0.4 How they work？\"></a>0.4 How they work？</h2><p>本地撰写好 <strong>Markdown</strong> 格式文章后，通过 <strong>Hexo</strong> 解析文档，渲染生成各类主题样式的 <strong>HTML</strong> <a class=\"link\" href=\"https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/6327183\">静态网页<i class=\"fas fa-external-link-alt\"></i></a>，再上传到 <strong>GitHub</strong> <strong>Repo</strong> 中，<strong>Vercel</strong> 通过拉拉取 <strong>GitHub</strong> <strong>库</strong> 中的数据以供访客访问。</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/40038a04b8da3713.png\">\n\n<hr>\n<h1 id=\"1-基础准备\"><a href=\"#1-基础准备\" class=\"headerlink\" title=\"1. 基础准备\"></a>1. 基础准备</h1><h2 id=\"1-1-环境搭建\"><a href=\"#1-1-环境搭建\" class=\"headerlink\" title=\"1.1 环境搭建\"></a>1.1 环境搭建</h2><p>安装<strong>Node.js</strong> + 安装<strong>Git</strong></p>\n<p><a class=\"link\" href=\"https://nodejs.org/zh-cn\">Node.js<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://git-scm.com/downloads\">Git<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>安装完成后，用<strong>Win</strong> + <strong>R</strong> 键输入 <strong>cmd</strong> 并打开，</p>\n<p>在命令框内输入 <strong>node -v</strong> 如果出现版本号则表示安装成功，</p>\n<img src=\"https://i.bmp.ovh/imgs/2022/03/182b37ed66fe4298.png\">\n\n<p>输入 <strong>npm install -g yarn</strong> 安装 <strong>yarn</strong>，</p>\n<p>完成后同理检查版本已确认安装。</p>\n<p>使用 <strong>git –version</strong> 完成检查。</p>\n<h2 id=\"1-2-账号注册\"><a href=\"#1-2-账号注册\" class=\"headerlink\" title=\"1.2 账号注册\"></a>1.2 账号注册</h2><p><strong>Github</strong>账号 + <strong>vercel</strong>账号 </p>\n<h2 id=\"1-3-域名准备\"><a href=\"#1-3-域名准备\" class=\"headerlink\" title=\"1.3 域名准备\"></a>1.3 域名准备</h2><p>这个环节可有可无，感兴趣可以自己买一个域名…</p>\n<p>这样就可以不用 <strong>Vercel</strong> 给出的。</p>\n<hr>\n<h1 id=\"2-搭建步骤\"><a href=\"#2-搭建步骤\" class=\"headerlink\" title=\"2. 搭建步骤\"></a>2. 搭建步骤</h1><h2 id=\"2-1-连接GitHub\"><a href=\"#2-1-连接GitHub\" class=\"headerlink\" title=\"2.1 连接GitHub\"></a>2.1 连接GitHub</h2><p>新建一个名为“<strong>Blog</strong>”的文件夹，</p>\n<p>如果出现如下类似问题（即误操作权限等问题），</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/2b93afa21cdfea92.jpg\"></p>\n<p>分别给 <strong>Node</strong>、Git 与 我们创建的 <strong>Blog</strong> 文件夹管理员权限。</p>\n<p>在文件夹内右键打开 “<strong>Git Bash Here</strong>”，</p>\n<p>不然在创建<u>SSH密钥</u>时很可能出现 “<strong>unknown key type -rsa</strong>” 的错误。</p>\n<p>在控制台内一次输入以下命令，</p>\n<p><code>git config --global user.name \"GitHub 用户名\"</code><br><code>git config --global user.email \"GitHub 邮箱\"</code></p>\n<h2 id=\"2-2-SSH密钥\"><a href=\"#2-2-SSH密钥\" class=\"headerlink\" title=\"2.2 SSH密钥\"></a>2.2 SSH密钥</h2><h3 id=\"2-2-1-创建密钥\"><a href=\"#2-2-1-创建密钥\" class=\"headerlink\" title=\"2.2.1 创建密钥\"></a>2.2.1 创建密钥</h3><p>输入 <code>ssh-keygen -t rsa -C \"GitHub 邮箱\"</code></p>\n<p>之后只需要摁4次回车就🆗；</p>\n<h2 id=\"2-2-2-添加密钥\"><a href=\"#2-2-2-添加密钥\" class=\"headerlink\" title=\"2.2.2 添加密钥\"></a>2.2.2 添加密钥</h2><p>通过资源管理器进入如下目录 <strong>[C:\\Users\\用户名\\.ssh]</strong> （此处记得勾选“隐藏的项目”），</p>\n<p>用记事本打开公钥 <strong>id_rsa.pub</strong> 文件 <strong>Ctrl + A</strong> 选择全部，复制内容。</p>\n<p>登录<strong>GitHub</strong>，进入 <strong>Settings</strong> 界面，选择左栏的 <strong>SSH and GPG  keys</strong>，</p>\n<p>选择 <strong>New SSH key</strong> ，<strong>Title</strong> 随便填写，</p>\n<p>将 <strong>id_rua.pub</strong> ，将内容复制进 “<strong>Key</strong>”，</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/be87470507217303.png\">\n\n<p>这步以后，会出现一长串 <strong>SSH</strong> 密钥 ，在之后我们会用上。</p>\n<h2 id=\"2-3-进行连接\"><a href=\"#2-3-进行连接\" class=\"headerlink\" title=\"2.3 进行连接\"></a>2.3 进行连接</h2><p>右键桌面空白部分，选择打开 <strong>Git Bash</strong> ，输入</p>\n<p><code>ssh -T git@github.com</code></p>\n<p>出现 “Are you sure……”等字样，输入 <strong>yes</strong>  回车确认。</p>\n<p>显示“You’ve successfully……”等字样即连接成功。</p>\n<h2 id=\"2-3-创建Git-Repo\"><a href=\"#2-3-创建Git-Repo\" class=\"headerlink\" title=\"2.3 创建Git Repo\"></a>2.3 创建Git Repo</h2><p>在<strong>GitHub</strong>界面点击如下图所示 “<strong>new repository</strong>” 新建仓库，</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2022/03/75160d297ca82600.png\"></p>\n<p>填写方式如下，</p>\n<p>**README.md **可以不用勾选。</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/88161a9d9dbd2cfa.png\">\n\n<h2 id=\"2-4-Hexo配置\"><a href=\"#2-4-Hexo配置\" class=\"headerlink\" title=\"2.4 Hexo配置\"></a>2.4 Hexo配置</h2><h3 id=\"2-4-1-安装-Hexo\"><a href=\"#2-4-1-安装-Hexo\" class=\"headerlink\" title=\"2.4.1 安装 Hexo\"></a>2.4.1 安装 Hexo</h3><p>使用 <strong>npm</strong> 安装程序</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<p>等待其安装完毕，时间也许会有点久…耐心等一下…</p>\n<h3 id=\"2-4-2-初始化\"><a href=\"#2-4-2-初始化\" class=\"headerlink\" title=\"2.4.2 初始化\"></a>2.4.2 初始化</h3><p>输入指令初始化，</p>\n<p><code>hexo init</code></p>\n<p>这时我们创建的<strong>Blog</strong>文件夹内会出现<strong>Hexo</strong>的各种文件，</p>\n<p>结构如下</p>\n<ul>\n<li>  _config.yml        # 配置文件</li>\n<li>  package.json               # 应用程序信息</li>\n<li>  scaffolds                  # 模板</li>\n<li>source                     # 存放用户资源，文档等<ul>\n<li>  _drafts</li>\n<li>  _posts</li>\n</ul>\n</li>\n<li>  themes                    # 主题文件夹</li>\n<li>  public                   # 网站文件</li>\n</ul>\n<p>输入如下指令，生成静态网页，</p>\n<p><code>hexo g</code></p>\n<p>输入如下指令，可以访问 <a class=\"link\" href=\"http://localhost:4000/\">http://localhost:4000<i class=\"fas fa-external-link-alt\"></i></a> 在本地预览页面，</p>\n<p><code>hexo server</code></p>\n<p>按 <strong>Ctrl + C</strong> 关闭服务器。</p>\n<h2 id=\"2-5-上传至GitHub-Repo\"><a href=\"#2-5-上传至GitHub-Repo\" class=\"headerlink\" title=\"2.5 上传至GitHub Repo\"></a>2.5 上传至GitHub Repo</h2><p>这部分属于<strong>Git</strong>的用法，本篇文章仅展示流程。</p>\n<p>（我也不是理解的特别透彻，就不班门弄斧了🙏）</p>\n<p><a href=\"(https://zhuanlan.zhihu.com/p/21193604)\">Learn more</a></p>\n<p>初始化<strong>Git</strong></p>\n<p><code>git init</code></p>\n<p>选择当前文件夹所有的文件，</p>\n<p><code>git add .</code></p>\n<p>将选择追踪的文件全部加入<u>缓冲区</u>，</p>\n<p>注释随意填写但不能为空，</p>\n<p><code>git commit -am “注释（代码提交信息）”</code></p>\n<p>创建<strong>main</strong>分支，</p>\n<p><code>git branch -M main</code></p>\n<p><u>链接</u>即为自己<strong>GitHub Repo</strong>的<u>SSH</u>，如下图，</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2022/03/c4fb128a4b566dcd.png\"></p>\n<p>确定连接至<strong>Github</strong> <strong>Repo</strong> ，</p>\n<p><code>git remote add origin “链接”</code></p>\n<p>这步结束以后会要求我们输入我们的 <u>SSH私钥</u>，</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/2940c32df77479f1.png\">\n\n<p>上传缓冲区的文件至<strong>GitHub Repo</strong>中的<strong>main</strong>分支，</p>\n<p><code>git push -u origin main</code></p>\n<p>这一步千万千万不要上传到<strong>master</strong>！！！</p>\n<center>千万不要！！！<center></center>\n\n<h2 id=\"2-6-Vercel配置\"><a href=\"#2-6-Vercel配置\" class=\"headerlink\" title=\"2.6 Vercel配置\"></a>2.6 Vercel配置</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/d0ec96c7463c99b2.png\"></p>\n<p>选择 “<strong>Browse All Templates</strong>” -&gt; 选择 “<strong>Hexo</strong>” 模板</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/fe3685a4793c1cbc.png\"></p>\n<p>在此页面选择 “<strong>Import a different Git Repository</strong>”</p>\n<p>选择我们最开始创建的 <strong>GitHub Repo</strong> 点击 “<strong>Import</strong>”</p>\n<p>点击 “<strong>Deploy</strong>” 完成部署，</p>\n<p>最后可通过图中连接进行访问我们的主页。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/56d9cee4ac785336.png\"></p>\n<hr>\n<h1 id=\"3-后期运营\"><a href=\"#3-后期运营\" class=\"headerlink\" title=\"3. 后期运营\"></a>3. 后期运营</h1><p>我们搭建 <strong>Blog</strong> 在此就已经大体上搭建好了，</p>\n<p>后期就是我们自己上传文章、配置各类文件或者使用主题进行美化等等。</p>\n<h2 id=\"3-1-新建文章\"><a href=\"#3-1-新建文章\" class=\"headerlink\" title=\"3.1 新建文章\"></a>3.1 新建文章</h2><p>使用以下命令新建文章，</p>\n<p><code>hexo new post 文章名</code></p>\n<p>文章的模板储存在 “<strong>scaffolds</strong>” 文件夹中，可以更换里边的模板，</p>\n<p>以更改我们创建的初始文章格式。</p>\n<h2 id=\"3-2-新建页面\"><a href=\"#3-2-新建页面\" class=\"headerlink\" title=\"3.2 新建页面\"></a>3.2 新建页面</h2><p>使用以下命令新建页面，</p>\n<p><code>hexo new page 页面名</code></p>\n<p>模板储存同上。</p>\n<h2 id=\"3-3-上传页面\"><a href=\"#3-3-上传页面\" class=\"headerlink\" title=\"3.3 上传页面\"></a>3.3 上传页面</h2><p>在我们在本地更新完页面以后，</p>\n<p>文章储存在“<strong>Blog\\source\\_posts</strong>” 中，</p>\n<p>当我们更新完文件并生成静态页面以后，</p>\n<p>依次使用</p>\n<p><code>git add .</code></p>\n<p><code>git commit -am “注释”</code></p>\n<p><code>git push -u origin main</code></p>\n<p>进行上传，<strong>vercel</strong> 将会自动部署。</p>\n<h2 id=\"3-4-清除页面\"><a href=\"#3-4-清除页面\" class=\"headerlink\" title=\"3.4 清除页面\"></a>3.4 清除页面</h2><p>修改并部署后没有效果，</p>\n<p>使用如下指令进行清除，然后再重新生成部署，</p>\n<p><code>hexo clean</code></p>\n<h2 id=\"3-5-主题下载\"><a href=\"#3-5-主题下载\" class=\"headerlink\" title=\"3.5 主题下载\"></a>3.5 主题下载</h2><p>在<a class=\"link\" href=\"https://hexo.io/themes/\">Themes | Hexo<i class=\"fas fa-external-link-alt\"></i></a>可以选择自己喜欢的主题，并在 <strong>Blog</strong> 文件夹页面，通过 <strong>Git Bash Here</strong> 进行下载，在相关的主题介绍内有其具体详细的介绍，在此就不多赘述。</p>\n<hr>\n<h1 id=\"4-域名更换\"><a href=\"#4-域名更换\" class=\"headerlink\" title=\"*4. 域名更换\"></a>*4. 域名更换</h1><h2 id=\"4-1-Vercel配置\"><a href=\"#4-1-Vercel配置\" class=\"headerlink\" title=\"*4.1 Vercel配置\"></a>*4.1 Vercel配置</h2><p>如果我们购买了自己的域名，我们可以在</p>\n<p>菜单栏中的 <strong>Domain</strong> 中点击 <strong>Add</strong></p>\n<p>选择我们要绑定的项目（即<strong>Blog</strong>），</p>\n<p>点击 <strong>Continue</strong> ，</p>\n<p>输入我们的 <strong>域名 + 后缀</strong> ，</p>\n<p>添加完毕后会显示如下图的界面。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/c44c3ef8c7d90e50.png\"></p>\n<h2 id=\"4-2-DNS解析\"><a href=\"#4-2-DNS解析\" class=\"headerlink\" title=\"*4.2 DNS解析\"></a>*4.2 DNS解析</h2><p>进入我们的域名管理界面，</p>\n<p>选择 “<strong>DNS 解析</strong>“ -&gt; ”<strong>域名解析</strong>“，</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/daf5d128c5a5cfb1.png\"></p>\n<p>如图进行添加，我们就能够通过我们自己的域名访问<strong>Blog</strong>了。</p>\n<hr>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"#结语\"></a>#结语</h1><p>总的来说全程都是免费的，不花一分钱….这种方式并没有用到<strong>GitHub Pages</strong>，如果对这种方式该兴趣的可以看看参考网站的第一个。</p>\n<p>这种方式写博客较为稳定，但是上传的过程会略显麻烦，却能在过程中学到很多的东西。</p>\n<p>本篇文章也许有些地方还不够详尽，欢迎大家提出进行进一步修改，共同进步。</p>\n<img src=\"bg.png\" width=\"360\" height=\"450\">\n\n\n\n\n\n\n\n\n\n\n\n<p>参考网站：</p>\n<p><a class=\"link\" href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://cn.bing.com/search?q=%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5&cvid=d95f1ce54fda4d2dbdadf30305e9e274&aqs=edge..69i57.2690j0j1&pglt=171&FORM=ANNTA1&PC=ASTS\">静态网页 <i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\">About GitHub Pages - GitHub Docs<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://hexo.io/zh-cn/\">Hexo<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://vercel.com/\">vercel<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://zhuanlan.zhihu.com/p/21193604\">git - 入门指南 - 知乎 (zhihu.com)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://aymetic.com/post/935c9419\">Vercel绑定个人域名 | Aymeticの小窝<i class=\"fas fa-external-link-alt\"></i></a></p>\n</center>","site":{"data":{"links":[{"name":"LiangGe","link":"https://www.liliaw.com/","description":"星星拼命发光，是为了让人能够看到。","avatar":"https://s3.bmp.ovh/imgs/2022/03/63d0e0edd014c0a0.jpg"},{"name":"Anillc","link":"https://ani.llc/","description":"https://ani.llc | AS142055 | BG8KYF","avatar":"https://gravatar.loli.net/avatar/5df946d48b36e6f8061cdfe7ebcdf75c?s=200"},{"name":"XPoet","link":"https://xpoet.cn/","description":"所有命运的馈赠，早已在暗中标好价格。","avatar":"https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/common-use/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"#前言\"></a>#前言</h1><blockquote>\n<p>  本文旨在将搭建本<strong>Blog</strong>的流程记录下来，并且让更多比我还小白的小白能看得明白</p>\n<p>  （也方便以后自己更改调试这些页面…），本文作者相关的基础也还在学习中，</p>\n<p>  有错误欢迎大家指正，文中出现的参考网站等，将会写在文末。</p>\n</blockquote>\n<h1 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0. 简介\"></a>0. 简介</h1><h2 id=\"0-1-What-is-GitHub-Pages？\"><a href=\"#0-1-What-is-GitHub-Pages？\" class=\"headerlink\" title=\"0.1 What is GitHub Pages？\"></a>0.1 What is GitHub Pages？</h2><p><strong>GitHub Pages</strong> 是 <strong>Github</strong> 官方提供的免费的静态站点托管服务，通过 <strong>GitHub 仓库</strong> 托管与发布我们的静态网站页面，这样我们基本不用操心维护的问题。</p>\n<p>这种方式的缺点就是，在国内访问 <strong>Github</strong> 的速度有点 … </p>\n<p><a class=\"link\" href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\">Know More<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>在不运用 <strong>Vercle</strong> 的时候我们使用此种方法。</p>\n<p>本篇文章将着重讲三者（<strong>GitHub + Hexo +Vercel</strong>）同时使用的配置流程。</p>\n<h2 id=\"0-2-What-is-Hexo？\"><a href=\"#0-2-What-is-Hexo？\" class=\"headerlink\" title=\"0.2 What is Hexo？\"></a>0.2 What is Hexo？</h2><p><strong>Hexo</strong> 是一个静态博客框架，基于 <strong>Node.js</strong> 运行，可以将我们撰写的 <strong>Markdown</strong> 文档（.md）解析渲染成静态的 <strong>HTML</strong> 网页，我所使用的写 <strong>Markdown</strong> 软件是 <strong>Typora</strong>。    </p>\n<p><a class=\"link\" href=\"https://hexo.io/zh-cn/\">Know More<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"0-3-What-is-vercel？\"><a href=\"#0-3-What-is-vercel？\" class=\"headerlink\" title=\"0.3 What is vercel？\"></a>0.3 What is vercel？</h2><p><strong>Vercel</strong> 是一家提供静态网站托管的云平台，能从 <strong>Github</strong> 仓库中拉取代码，能够有效地提升我们访问网站的速度。</p>\n<p><a class=\"link\" href=\"https://vercel.com/\">Know More<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"0-4-How-they-work？\"><a href=\"#0-4-How-they-work？\" class=\"headerlink\" title=\"0.4 How they work？\"></a>0.4 How they work？</h2><p>本地撰写好 <strong>Markdown</strong> 格式文章后，通过 <strong>Hexo</strong> 解析文档，渲染生成各类主题样式的 <strong>HTML</strong> <a class=\"link\" href=\"https://baike.baidu.com/item/%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/6327183\">静态网页<i class=\"fas fa-external-link-alt\"></i></a>，再上传到 <strong>GitHub</strong> <strong>Repo</strong> 中，<strong>Vercel</strong> 通过拉拉取 <strong>GitHub</strong> <strong>库</strong> 中的数据以供访客访问。</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/40038a04b8da3713.png\">\n\n<hr>\n<h1 id=\"1-基础准备\"><a href=\"#1-基础准备\" class=\"headerlink\" title=\"1. 基础准备\"></a>1. 基础准备</h1><h2 id=\"1-1-环境搭建\"><a href=\"#1-1-环境搭建\" class=\"headerlink\" title=\"1.1 环境搭建\"></a>1.1 环境搭建</h2><p>安装<strong>Node.js</strong> + 安装<strong>Git</strong></p>\n<p><a class=\"link\" href=\"https://nodejs.org/zh-cn\">Node.js<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://git-scm.com/downloads\">Git<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>安装完成后，用<strong>Win</strong> + <strong>R</strong> 键输入 <strong>cmd</strong> 并打开，</p>\n<p>在命令框内输入 <strong>node -v</strong> 如果出现版本号则表示安装成功，</p>\n<img src=\"https://i.bmp.ovh/imgs/2022/03/182b37ed66fe4298.png\">\n\n<p>输入 <strong>npm install -g yarn</strong> 安装 <strong>yarn</strong>，</p>\n<p>完成后同理检查版本已确认安装。</p>\n<p>使用 <strong>git –version</strong> 完成检查。</p>\n<h2 id=\"1-2-账号注册\"><a href=\"#1-2-账号注册\" class=\"headerlink\" title=\"1.2 账号注册\"></a>1.2 账号注册</h2><p><strong>Github</strong>账号 + <strong>vercel</strong>账号 </p>\n<h2 id=\"1-3-域名准备\"><a href=\"#1-3-域名准备\" class=\"headerlink\" title=\"1.3 域名准备\"></a>1.3 域名准备</h2><p>这个环节可有可无，感兴趣可以自己买一个域名…</p>\n<p>这样就可以不用 <strong>Vercel</strong> 给出的。</p>\n<hr>\n<h1 id=\"2-搭建步骤\"><a href=\"#2-搭建步骤\" class=\"headerlink\" title=\"2. 搭建步骤\"></a>2. 搭建步骤</h1><h2 id=\"2-1-连接GitHub\"><a href=\"#2-1-连接GitHub\" class=\"headerlink\" title=\"2.1 连接GitHub\"></a>2.1 连接GitHub</h2><p>新建一个名为“<strong>Blog</strong>”的文件夹，</p>\n<p>如果出现如下类似问题（即误操作权限等问题），</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/2b93afa21cdfea92.jpg\"></p>\n<p>分别给 <strong>Node</strong>、Git 与 我们创建的 <strong>Blog</strong> 文件夹管理员权限。</p>\n<p>在文件夹内右键打开 “<strong>Git Bash Here</strong>”，</p>\n<p>不然在创建<u>SSH密钥</u>时很可能出现 “<strong>unknown key type -rsa</strong>” 的错误。</p>\n<p>在控制台内一次输入以下命令，</p>\n<p><code>git config --global user.name \"GitHub 用户名\"</code><br><code>git config --global user.email \"GitHub 邮箱\"</code></p>\n<h2 id=\"2-2-SSH密钥\"><a href=\"#2-2-SSH密钥\" class=\"headerlink\" title=\"2.2 SSH密钥\"></a>2.2 SSH密钥</h2><h3 id=\"2-2-1-创建密钥\"><a href=\"#2-2-1-创建密钥\" class=\"headerlink\" title=\"2.2.1 创建密钥\"></a>2.2.1 创建密钥</h3><p>输入 <code>ssh-keygen -t rsa -C \"GitHub 邮箱\"</code></p>\n<p>之后只需要摁4次回车就🆗；</p>\n<h2 id=\"2-2-2-添加密钥\"><a href=\"#2-2-2-添加密钥\" class=\"headerlink\" title=\"2.2.2 添加密钥\"></a>2.2.2 添加密钥</h2><p>通过资源管理器进入如下目录 <strong>[C:\\Users\\用户名\\.ssh]</strong> （此处记得勾选“隐藏的项目”），</p>\n<p>用记事本打开公钥 <strong>id_rsa.pub</strong> 文件 <strong>Ctrl + A</strong> 选择全部，复制内容。</p>\n<p>登录<strong>GitHub</strong>，进入 <strong>Settings</strong> 界面，选择左栏的 <strong>SSH and GPG  keys</strong>，</p>\n<p>选择 <strong>New SSH key</strong> ，<strong>Title</strong> 随便填写，</p>\n<p>将 <strong>id_rua.pub</strong> ，将内容复制进 “<strong>Key</strong>”，</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/be87470507217303.png\">\n\n<p>这步以后，会出现一长串 <strong>SSH</strong> 密钥 ，在之后我们会用上。</p>\n<h2 id=\"2-3-进行连接\"><a href=\"#2-3-进行连接\" class=\"headerlink\" title=\"2.3 进行连接\"></a>2.3 进行连接</h2><p>右键桌面空白部分，选择打开 <strong>Git Bash</strong> ，输入</p>\n<p><code>ssh -T git@github.com</code></p>\n<p>出现 “Are you sure……”等字样，输入 <strong>yes</strong>  回车确认。</p>\n<p>显示“You’ve successfully……”等字样即连接成功。</p>\n<h2 id=\"2-3-创建Git-Repo\"><a href=\"#2-3-创建Git-Repo\" class=\"headerlink\" title=\"2.3 创建Git Repo\"></a>2.3 创建Git Repo</h2><p>在<strong>GitHub</strong>界面点击如下图所示 “<strong>new repository</strong>” 新建仓库，</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2022/03/75160d297ca82600.png\"></p>\n<p>填写方式如下，</p>\n<p>**README.md **可以不用勾选。</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/88161a9d9dbd2cfa.png\">\n\n<h2 id=\"2-4-Hexo配置\"><a href=\"#2-4-Hexo配置\" class=\"headerlink\" title=\"2.4 Hexo配置\"></a>2.4 Hexo配置</h2><h3 id=\"2-4-1-安装-Hexo\"><a href=\"#2-4-1-安装-Hexo\" class=\"headerlink\" title=\"2.4.1 安装 Hexo\"></a>2.4.1 安装 Hexo</h3><p>使用 <strong>npm</strong> 安装程序</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<p>等待其安装完毕，时间也许会有点久…耐心等一下…</p>\n<h3 id=\"2-4-2-初始化\"><a href=\"#2-4-2-初始化\" class=\"headerlink\" title=\"2.4.2 初始化\"></a>2.4.2 初始化</h3><p>输入指令初始化，</p>\n<p><code>hexo init</code></p>\n<p>这时我们创建的<strong>Blog</strong>文件夹内会出现<strong>Hexo</strong>的各种文件，</p>\n<p>结构如下</p>\n<ul>\n<li>  _config.yml        # 配置文件</li>\n<li>  package.json               # 应用程序信息</li>\n<li>  scaffolds                  # 模板</li>\n<li>source                     # 存放用户资源，文档等<ul>\n<li>  _drafts</li>\n<li>  _posts</li>\n</ul>\n</li>\n<li>  themes                    # 主题文件夹</li>\n<li>  public                   # 网站文件</li>\n</ul>\n<p>输入如下指令，生成静态网页，</p>\n<p><code>hexo g</code></p>\n<p>输入如下指令，可以访问 <a class=\"link\" href=\"http://localhost:4000/\">http://localhost:4000<i class=\"fas fa-external-link-alt\"></i></a> 在本地预览页面，</p>\n<p><code>hexo server</code></p>\n<p>按 <strong>Ctrl + C</strong> 关闭服务器。</p>\n<h2 id=\"2-5-上传至GitHub-Repo\"><a href=\"#2-5-上传至GitHub-Repo\" class=\"headerlink\" title=\"2.5 上传至GitHub Repo\"></a>2.5 上传至GitHub Repo</h2><p>这部分属于<strong>Git</strong>的用法，本篇文章仅展示流程。</p>\n<p>（我也不是理解的特别透彻，就不班门弄斧了🙏）</p>\n<p><a href=\"(https://zhuanlan.zhihu.com/p/21193604)\">Learn more</a></p>\n<p>初始化<strong>Git</strong></p>\n<p><code>git init</code></p>\n<p>选择当前文件夹所有的文件，</p>\n<p><code>git add .</code></p>\n<p>将选择追踪的文件全部加入<u>缓冲区</u>，</p>\n<p>注释随意填写但不能为空，</p>\n<p><code>git commit -am “注释（代码提交信息）”</code></p>\n<p>创建<strong>main</strong>分支，</p>\n<p><code>git branch -M main</code></p>\n<p><u>链接</u>即为自己<strong>GitHub Repo</strong>的<u>SSH</u>，如下图，</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2022/03/c4fb128a4b566dcd.png\"></p>\n<p>确定连接至<strong>Github</strong> <strong>Repo</strong> ，</p>\n<p><code>git remote add origin “链接”</code></p>\n<p>这步结束以后会要求我们输入我们的 <u>SSH私钥</u>，</p>\n<img src=\"https://s3.bmp.ovh/imgs/2022/03/2940c32df77479f1.png\">\n\n<p>上传缓冲区的文件至<strong>GitHub Repo</strong>中的<strong>main</strong>分支，</p>\n<p><code>git push -u origin main</code></p>\n<p>这一步千万千万不要上传到<strong>master</strong>！！！</p>\n<center>千万不要！！！<center></center>\n\n<h2 id=\"2-6-Vercel配置\"><a href=\"#2-6-Vercel配置\" class=\"headerlink\" title=\"2.6 Vercel配置\"></a>2.6 Vercel配置</h2><p><img src=\"https://s3.bmp.ovh/imgs/2022/03/d0ec96c7463c99b2.png\"></p>\n<p>选择 “<strong>Browse All Templates</strong>” -&gt; 选择 “<strong>Hexo</strong>” 模板</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/fe3685a4793c1cbc.png\"></p>\n<p>在此页面选择 “<strong>Import a different Git Repository</strong>”</p>\n<p>选择我们最开始创建的 <strong>GitHub Repo</strong> 点击 “<strong>Import</strong>”</p>\n<p>点击 “<strong>Deploy</strong>” 完成部署，</p>\n<p>最后可通过图中连接进行访问我们的主页。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/56d9cee4ac785336.png\"></p>\n<hr>\n<h1 id=\"3-后期运营\"><a href=\"#3-后期运营\" class=\"headerlink\" title=\"3. 后期运营\"></a>3. 后期运营</h1><p>我们搭建 <strong>Blog</strong> 在此就已经大体上搭建好了，</p>\n<p>后期就是我们自己上传文章、配置各类文件或者使用主题进行美化等等。</p>\n<h2 id=\"3-1-新建文章\"><a href=\"#3-1-新建文章\" class=\"headerlink\" title=\"3.1 新建文章\"></a>3.1 新建文章</h2><p>使用以下命令新建文章，</p>\n<p><code>hexo new post 文章名</code></p>\n<p>文章的模板储存在 “<strong>scaffolds</strong>” 文件夹中，可以更换里边的模板，</p>\n<p>以更改我们创建的初始文章格式。</p>\n<h2 id=\"3-2-新建页面\"><a href=\"#3-2-新建页面\" class=\"headerlink\" title=\"3.2 新建页面\"></a>3.2 新建页面</h2><p>使用以下命令新建页面，</p>\n<p><code>hexo new page 页面名</code></p>\n<p>模板储存同上。</p>\n<h2 id=\"3-3-上传页面\"><a href=\"#3-3-上传页面\" class=\"headerlink\" title=\"3.3 上传页面\"></a>3.3 上传页面</h2><p>在我们在本地更新完页面以后，</p>\n<p>文章储存在“<strong>Blog\\source\\_posts</strong>” 中，</p>\n<p>当我们更新完文件并生成静态页面以后，</p>\n<p>依次使用</p>\n<p><code>git add .</code></p>\n<p><code>git commit -am “注释”</code></p>\n<p><code>git push -u origin main</code></p>\n<p>进行上传，<strong>vercel</strong> 将会自动部署。</p>\n<h2 id=\"3-4-清除页面\"><a href=\"#3-4-清除页面\" class=\"headerlink\" title=\"3.4 清除页面\"></a>3.4 清除页面</h2><p>修改并部署后没有效果，</p>\n<p>使用如下指令进行清除，然后再重新生成部署，</p>\n<p><code>hexo clean</code></p>\n<h2 id=\"3-5-主题下载\"><a href=\"#3-5-主题下载\" class=\"headerlink\" title=\"3.5 主题下载\"></a>3.5 主题下载</h2><p>在<a class=\"link\" href=\"https://hexo.io/themes/\">Themes | Hexo<i class=\"fas fa-external-link-alt\"></i></a>可以选择自己喜欢的主题，并在 <strong>Blog</strong> 文件夹页面，通过 <strong>Git Bash Here</strong> 进行下载，在相关的主题介绍内有其具体详细的介绍，在此就不多赘述。</p>\n<hr>\n<h1 id=\"4-域名更换\"><a href=\"#4-域名更换\" class=\"headerlink\" title=\"*4. 域名更换\"></a>*4. 域名更换</h1><h2 id=\"4-1-Vercel配置\"><a href=\"#4-1-Vercel配置\" class=\"headerlink\" title=\"*4.1 Vercel配置\"></a>*4.1 Vercel配置</h2><p>如果我们购买了自己的域名，我们可以在</p>\n<p>菜单栏中的 <strong>Domain</strong> 中点击 <strong>Add</strong></p>\n<p>选择我们要绑定的项目（即<strong>Blog</strong>），</p>\n<p>点击 <strong>Continue</strong> ，</p>\n<p>输入我们的 <strong>域名 + 后缀</strong> ，</p>\n<p>添加完毕后会显示如下图的界面。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/c44c3ef8c7d90e50.png\"></p>\n<h2 id=\"4-2-DNS解析\"><a href=\"#4-2-DNS解析\" class=\"headerlink\" title=\"*4.2 DNS解析\"></a>*4.2 DNS解析</h2><p>进入我们的域名管理界面，</p>\n<p>选择 “<strong>DNS 解析</strong>“ -&gt; ”<strong>域名解析</strong>“，</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/03/daf5d128c5a5cfb1.png\"></p>\n<p>如图进行添加，我们就能够通过我们自己的域名访问<strong>Blog</strong>了。</p>\n<hr>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"#结语\"></a>#结语</h1><p>总的来说全程都是免费的，不花一分钱….这种方式并没有用到<strong>GitHub Pages</strong>，如果对这种方式该兴趣的可以看看参考网站的第一个。</p>\n<p>这种方式写博客较为稳定，但是上传的过程会略显麻烦，却能在过程中学到很多的东西。</p>\n<p>本篇文章也许有些地方还不够详尽，欢迎大家提出进行进一步修改，共同进步。</p>\n<img src=\"bg.png\" width=\"360\" height=\"450\">\n\n\n\n\n\n\n\n\n\n\n\n<p>参考网站：</p>\n<p><a class=\"link\" href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://cn.bing.com/search?q=%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5&cvid=d95f1ce54fda4d2dbdadf30305e9e274&aqs=edge..69i57.2690j0j1&pglt=171&FORM=ANNTA1&PC=ASTS\">静态网页 <i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\">About GitHub Pages - GitHub Docs<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://hexo.io/zh-cn/\">Hexo<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://vercel.com/\">vercel<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://zhuanlan.zhihu.com/p/21193604\">git - 入门指南 - 知乎 (zhihu.com)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\" href=\"https://aymetic.com/post/935c9419\">Vercel绑定个人域名 | Aymeticの小窝<i class=\"fas fa-external-link-alt\"></i></a></p>\n</center>"}],"PostAsset":[{"_id":"source/_posts/【STM32学习记录】第一节-了解STM32/艾米莉亚1.jpg","slug":"艾米莉亚1.jpg","post":"cl0mpbb3s00075gv96ska8kdo","modified":0,"renderable":0},{"_id":"source/_posts/如何搭建自己的Blog/bg.png","slug":"bg.png","post":"cl0mpbb3u000b5gv9drrna7d1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl0mpbb3j00015gv98hsjgm8n","category_id":"cl0mpbb3p00045gv97669b9yz","_id":"cl0mpbb3x000g5gv9cci3f6zw"},{"post_id":"cl0mpbb3n00035gv93zu491kp","category_id":"cl0mpbb3p00045gv97669b9yz","_id":"cl0mpbb3y000i5gv94g215v59"},{"post_id":"cl0mpbb3s00075gv96ska8kdo","category_id":"cl0mpbb3x000f5gv95bsc2yj8","_id":"cl0mpbb3y000n5gv95256hb5y"},{"post_id":"cl0mpbb3t00095gv9cmu9afvf","category_id":"cl0mpbb3y000j5gv93svfg5yx","_id":"cl0mpbb3z000q5gv92jei8e27"},{"post_id":"cl0mpbb3u000b5gv9drrna7d1","category_id":"cl0mpbb3z000o5gv9cmtz2vci","_id":"cl0mpbb3z000s5gv9a5zyahbq"}],"PostTag":[{"post_id":"cl0mpbb3j00015gv98hsjgm8n","tag_id":"cl0mpbb3r00055gv940n3f01d","_id":"cl0mpbb3w000e5gv9cw5y42fv"},{"post_id":"cl0mpbb3n00035gv93zu491kp","tag_id":"cl0mpbb3r00055gv940n3f01d","_id":"cl0mpbb3y000l5gv95u5r1kge"},{"post_id":"cl0mpbb3n00035gv93zu491kp","tag_id":"cl0mpbb3x000h5gv995gu3guq","_id":"cl0mpbb3y000m5gv96cwpaghy"},{"post_id":"cl0mpbb3s00075gv96ska8kdo","tag_id":"cl0mpbb3y000k5gv95xqmhqs5","_id":"cl0mpbb40000u5gv93isc6cn4"},{"post_id":"cl0mpbb3s00075gv96ska8kdo","tag_id":"cl0mpbb3z000p5gv9gl225nt4","_id":"cl0mpbb40000v5gv9h5vufd0n"},{"post_id":"cl0mpbb3s00075gv96ska8kdo","tag_id":"cl0mpbb3z000r5gv9gqg48meh","_id":"cl0mpbb40000x5gv92ows6uom"},{"post_id":"cl0mpbb3t00095gv9cmu9afvf","tag_id":"cl0mpbb3z000t5gv92gv20w39","_id":"cl0mpbb4000105gv98i5j69oa"},{"post_id":"cl0mpbb3t00095gv9cmu9afvf","tag_id":"cl0mpbb40000w5gv9caiu8bib","_id":"cl0mpbb4100115gv92ehp7bqr"},{"post_id":"cl0mpbb3t00095gv9cmu9afvf","tag_id":"cl0mpbb40000y5gv9ab5rfjsj","_id":"cl0mpbb4100135gv9ake6h6g1"},{"post_id":"cl0mpbb3u000b5gv9drrna7d1","tag_id":"cl0mpbb3r00055gv940n3f01d","_id":"cl0mpbb4100155gv99a6sdyzl"},{"post_id":"cl0mpbb3u000b5gv9drrna7d1","tag_id":"cl0mpbb40000z5gv97asw6wfn","_id":"cl0mpbb4100165gv92xh2dimg"},{"post_id":"cl0mpbb3u000b5gv9drrna7d1","tag_id":"cl0mpbb4100125gv9g9fj2a97","_id":"cl0mpbb4100175gv91fc75t2g"},{"post_id":"cl0mpbb3u000b5gv9drrna7d1","tag_id":"cl0mpbb4100145gv960bnagsr","_id":"cl0mpbb4100185gv9fxvs4v6c"}],"Tag":[{"name":"Hexo","_id":"cl0mpbb3r00055gv940n3f01d"},{"name":"Beginning","_id":"cl0mpbb3x000h5gv995gu3guq"},{"name":"STM32","_id":"cl0mpbb3y000k5gv95xqmhqs5"},{"name":"C8T6","_id":"cl0mpbb3z000p5gv9gl225nt4"},{"name":"芯片结构","_id":"cl0mpbb3z000r5gv9gqg48meh"},{"name":"C","_id":"cl0mpbb3z000t5gv92gv20w39"},{"name":"malloc","_id":"cl0mpbb40000w5gv9caiu8bib"},{"name":"动态分配","_id":"cl0mpbb40000y5gv9ab5rfjsj"},{"name":"Github","_id":"cl0mpbb40000z5gv97asw6wfn"},{"name":"Vercel","_id":"cl0mpbb4100125gv9g9fj2a97"},{"name":"Blog","_id":"cl0mpbb4100145gv960bnagsr"}]}}